#
# Unit test Makefile fragment.
#
# Unit tests require C++11.
#

.PHONY: unittest unit_clean

unit_src        := unit
unit_obj        := unit/.build
unit_src_editor := unit/editor
unit_obj_editor := unit/editor/.build
unit_src_io     := unit/io
unit_obj_io     := unit/io/.build
unit_src_network:= unit/network
unit_obj_network:= unit/network/.build

ifneq (${BINEXT},)
unit_ext        := ${BINEXT}
else
unit_ext        := .test
endif

unit_objs := \
  ${unit_obj}/align${unit_ext}         \
  ${unit_obj}/expr${unit_ext}          \
  ${unit_obj}/memcasecmp${unit_ext}    \
  ${unit_obj_io}/bitstream${unit_ext}  \
  ${unit_obj_io}/memfile${unit_ext}    \
  ${unit_obj_io}/path${unit_ext}       \
  ${unit_obj_io}/vio${unit_ext}        \

ifneq (${BUILD_EDITOR},)

unit_objs += \
  ${unit_obj_editor}/stringsearch${unit_ext}

endif

ifneq (${BUILD_NETWORK},)

unit_objs += \
  ${unit_obj_network}/sha256${unit_ext}

endif

#
# Some unit tests only work with modular builds. The reason is usually
# that the component(s) being tested are far too dependent on other
# components of MegaZeux to work alone.
#
ifneq (${BUILD_MODULAR},)

unit_objs += \
  ${unit_obj}/configure${unit_ext}     \
  ${unit_obj}/intake${unit_ext}        \
  ${unit_obj_io}/zip${unit_ext}

unit_ldflags += -L. -lcore

ifneq (${BUILD_EDITOR},)
unit_ldflags += -L. -leditor
endif

ifneq (${BUILD_NETWORK},)
unit_objs += \
  ${unit_obj_network}/Manifest${unit_ext}
endif
endif

#
# This may already be set with sanitizer flags.
#
DEBUG_CFLAGS ?= -O0

#
# Build without -DDEBUG to suppress debug messages,
# build without -DNDEBUG to allow assert().
#
unit_cflags ?= ${DEBUG_CFLAGS} -g \
 -Wall -Wextra -pedantic -Wno-unused-parameter -funsigned-char -std=gnu++11

unit_cflags += ${SDL_CFLAGS} -Umain
unit_ldflags +=

#
# Old GCC versions emit false positive warnings for C++11 value initializers.
#
ifeq (${HAS_BROKEN_W_MISSING_FIELD_INITIALIZERS},1)
unit_cflags += -Wno-missing-field-initializers
endif

ifeq (${BUILD_F_ANALYZER},1)
ifeq (${HAS_F_ANALYZER},1)
unit_cflags += -fanalyzer
endif
endif

ifneq (${HAS_CXX_11},1)

unittest:
	$(if ${V},,@echo "Skipping unit tests (requires C++11).")

unit_clean:

else

${unit_obj}/%${unit_ext}: ${unit_src}/%.cpp
	$(if ${V},,@echo "  CXX     " $<)
	${CXX} -MD ${unit_cflags} $< -o $@ ${unit_ldflags}

${unit_obj_editor}/%${unit_ext}: ${unit_src_editor}/%.cpp
	$(if ${V},,@echo "  CXX     " $<)
	${CXX} -MD ${unit_cflags} $< -o $@ ${unit_ldflags}

${unit_obj_io}/%${unit_ext}: ${unit_src_io}/%.cpp
	$(if ${V},,@echo "  CXX     " $<)
	${CXX} -MD ${unit_cflags} $< -o $@ ${unit_ldflags}

${unit_obj_network}/%${unit_ext}: ${unit_src_network}/%.cpp
	$(if ${V},,@echo "  CXX     " $<)
	${CXX} -MD ${unit_cflags} $< -o $@ ${unit_ldflags}

-include ${unit_objs:${unit_ext}=.d}

${unit_objs}: | $(filter-out $(wildcard ${unit_obj}), ${unit_obj})
${unit_objs}: | $(filter-out $(wildcard ${unit_obj_editor}), ${unit_obj_editor})
${unit_objs}: | $(filter-out $(wildcard ${unit_obj_io}), ${unit_obj_io})
${unit_objs}: | $(filter-out $(wildcard ${unit_obj_network}), ${unit_obj_network})

unittest: ${unit_objs}
	@failcount=0; \
	for t in ${unit_objs}; do \
		LD_LIBRARY_PATH="." ./$$t ; \
		if [ "$$?" != "0" ] ; then \
			failcount=$$(($$failcount + 1)); \
		fi; \
	done; \
	if [ "$$failcount" -gt "0" ]; then \
		echo "Failed $$failcount test set(s)."; \
		exit 1; \
	fi;

unit_clean:
	$(if ${V},,@echo "  RM      " ${unit_obj} ${unit_obj_editor} ${unit_obj_io} ${unit_obj_network})
	${RM} -r ${unit_obj} ${unit_obj_editor} ${unit_obj_io} ${unit_obj_network}

endif
