Index: src/runrobo2.c
===================================================================
--- src/runrobo2.c	(revision 334)
+++ src/runrobo2.c	(working copy)
@@ -4638,12 +4638,12 @@
           // Board to board
           case 0:
           {
-            char id_buffer[width * height];
-            char param_buffer[width * height];
-            char color_buffer[width * height];
-            char under_id_buffer[width * height];
-            char under_param_buffer[width * height];
-            char under_color_buffer[width * height];
+            char *id_buffer = malloc(width * height);
+            char *param_buffer = malloc(width * height);
+            char *color_buffer = malloc(width * height);
+            char *under_id_buffer = malloc(width * height);
+            char *under_param_buffer = malloc(width * height);
+            char *under_color_buffer = malloc(width * height);
 
             copy_board_to_board_buffer(src_board, src_x, src_y, width,
              height, id_buffer, param_buffer, color_buffer,
@@ -4654,6 +4654,12 @@
              under_id_buffer, under_param_buffer, under_color_buffer);
             update_blocked = 1;
 
+            free(under_color_buffer);
+            free(under_param_buffer);
+            free(under_id_buffer);
+            free(color_buffer);
+            free(param_buffer);
+            free(id_buffer);
             break;
           }
 
@@ -4698,14 +4704,18 @@
           // Vlayer to vlayer
           case 10:
           {
-            char char_buffer[width * height];
-            char color_buffer[width * height];
+            char *char_buffer = malloc(width * height);
+            char *color_buffer = malloc(width * height);
+
             copy_layer_to_buffer(src_x, src_y, width, height,
              mzx_world->vlayer_chars, mzx_world->vlayer_colors,
              char_buffer, color_buffer, mzx_world->vlayer_width);
             copy_buffer_to_layer(dest_x, dest_y, width, height,
              char_buffer, color_buffer, mzx_world->vlayer_chars,
              mzx_world->vlayer_colors, mzx_world->vlayer_width);
+
+            free(color_buffer);
+            free(char_buffer);
             break;
           }
         }
@@ -4914,14 +4924,16 @@
           {
             if(src_board->overlay_mode)
             {
-              char char_buffer[width * height];
-              char color_buffer[width * height];
+              char *char_buffer = malloc(width * height);
+              char *color_buffer = malloc(width * height);
               copy_layer_to_buffer(src_x, src_y, width, height,
                src_board->overlay, src_board->overlay_color,
                char_buffer, color_buffer, board_width);
               copy_buffer_to_layer(dest_x, dest_y, width, height,
                char_buffer, color_buffer, src_board->overlay,
                src_board->overlay_color, board_width);
+              free(color_buffer);
+              free(char_buffer);
             }
             break;
           }
@@ -4959,14 +4971,18 @@
           // Vlayer to vlayer
           case 10:
           {
-            char char_buffer[width * height];
-            char color_buffer[width * height];
+            char *char_buffer = malloc(width * height);
+            char *color_buffer = malloc(width * height);
+
             copy_layer_to_buffer(src_x, src_y, width, height,
              mzx_world->vlayer_chars, mzx_world->vlayer_colors,
              char_buffer, color_buffer, mzx_world->vlayer_width);
             copy_buffer_to_layer(dest_x, dest_y, width, height,
              char_buffer, color_buffer, mzx_world->vlayer_chars,
              mzx_world->vlayer_colors, mzx_world->vlayer_width);
+
+            free(color_buffer);
+            free(char_buffer);
             break;
           }
         }
Index: src/robo_ed.c
===================================================================
--- src/robo_ed.c	(revision 334)
+++ src/robo_ed.c	(working copy)
@@ -1527,14 +1527,14 @@
 
   int total_dialog_elements = macro_src->total_variables + 3;
   int num_types = macro_src->num_types;
-  element *elements[total_dialog_elements];
-  int nominal_column_widths[num_types];
-  int nominal_column_subwidths[num_types];
-  int vars_per_line[num_types];
+  element **elements = malloc(sizeof(element *) * total_dialog_elements);
+  int *nominal_column_widths = malloc(sizeof(int) * num_types);
+  int *nominal_column_subwidths = malloc(sizeof(int) * num_types);
+  int *vars_per_line = malloc(sizeof(int) * num_types);
   int largest_column_width = 0;
   int total_width;
   int largest_total_width;
-  int lines_needed[num_types];
+  int *lines_needed = malloc(sizeof(int) * num_types);
   int nominal_width = 77, old_width = 77;
   int nominal_height, old_height = 25;
   int total_lines_needed;
@@ -1554,7 +1554,7 @@
   if(!num_types)
   {
     output_macro(rstate, macro_src);
-    return;
+    goto exit_free;
   }
 
   current_type = macro_src->types;
@@ -1807,6 +1807,13 @@
   } while(dialog_value == -2);
 
   destruct_dialog(&di);
+
+exit_free:
+  free(lines_needed);
+  free(vars_per_line);
+  free(nominal_column_subwidths);
+  free(nominal_column_widths);
+  free(elements);
 }
 
 static void execute_numbered_macro(robot_state *rstate, int num)
Index: src/counter.c
===================================================================
--- src/counter.c	(revision 334)
+++ src/counter.c	(working copy)
@@ -1709,12 +1709,15 @@
 
   if(get_string(mzx_world, name, &src, id))
   {
-    // Dirty C99, but it works for padding a null terminator.
-    char n_buffer[src.length + 1];
+    char *n_buffer = malloc(src.length + 1);
+    long ret;
+
     memcpy(n_buffer, src.value, src.length);
     n_buffer[src.length] = 0;
+    ret = strtol(n_buffer, NULL, 10);
 
-    return strtol(n_buffer, NULL, 10);
+    free(n_buffer);
+    return ret;
   }
 
   return 0;
Index: src/char_ed.c
===================================================================
--- src/char_ed.c	(revision 334)
+++ src/char_ed.c	(working copy)
@@ -1026,7 +1026,8 @@
         {
           char *buffer_ptr = buffer +
            block_start_x + (block_start_y * buffer_width);
-          char wrap_row[block_width];
+          char *wrap_row = malloc(block_width);
+
           memcpy(previous, buffer, buffer_size);
           memcpy(wrap_row, buffer_ptr, block_width);
 
@@ -1036,10 +1037,13 @@
             memcpy(buffer_ptr, buffer_ptr + buffer_width,
              block_width);
           }
+
           memcpy(buffer_ptr, wrap_row, block_width);
           collapse_buffer(buffer, current_width,
            current_height, highlight_width, highlight_height,
            current_char, screen_mode);
+
+          free(wrap_row);
         }
         else
         {
@@ -1060,7 +1064,8 @@
           char *buffer_ptr = buffer +
            block_start_x + ((block_start_y + (block_height - 1)) *
            buffer_width);
-          char wrap_row[block_width];
+          char *wrap_row = malloc(block_width);
+
           memcpy(previous, buffer, buffer_size);
           memcpy(wrap_row, buffer_ptr, block_width);
 
@@ -1070,10 +1075,13 @@
             memcpy(buffer_ptr, buffer_ptr - buffer_width,
              block_width);
           }
+
           memcpy(buffer_ptr, wrap_row, block_width);
           collapse_buffer(buffer, current_width,
            current_height, highlight_width, highlight_height,
            current_char, screen_mode);
+
+          free(wrap_row);
         }
         else
         {
@@ -1174,13 +1182,14 @@
 
         if(num_factors > 1)
         {
-          element *elements[num_factors];
+          element **elements = malloc(sizeof(element *) * num_factors);
+          char **radio_button_strings = malloc(sizeof (char *) * num_factors);
+          char **radio_button_substrings = malloc(sizeof (char *) * num_factors);
           dialog di;
-          char *radio_button_strings[num_factors];
-          char radio_button_substrings[num_factors][32];
 
           for(i = 0; i < num_factors; i++)
           {
+            radio_button_substrings[i] = malloc(32);
             radio_button_strings[i] = radio_button_substrings[i];
             sprintf(radio_button_strings[i], "%d x %d",
              factors[i], highlight_size / factors[i]);
@@ -1197,6 +1206,12 @@
 
           run_dialog(mzx_world, &di);
           destruct_dialog(&di);
+
+          for (i = 0; i < num_factors; i++)
+            free(radio_button_substrings[i]);
+          free(radio_button_substrings);
+          free(radio_button_strings);
+          free(elements);
         }
 
         current_width = factors[subdivision];
@@ -1362,7 +1377,7 @@
         }
         else
         {
-          char temp_buffer[block_width];
+          char *temp_buffer = malloc(sizeof(char) * block_width);
           int start_offset = block_start_x +
            (block_start_y * buffer_width);
           int end_offset = start_offset +
@@ -1384,6 +1399,8 @@
           collapse_buffer(buffer, current_width,
            current_height, highlight_width, highlight_height,
            current_char, screen_mode);
+
+          free(temp_buffer);
         }
 
         break;
@@ -1448,13 +1465,14 @@
         // Undo
         if(get_alt_status(keycode_SDL))
         {
-          char swap[buffer_size];
+          char *swap = malloc(sizeof(char) * buffer_size);
           memcpy(swap, buffer, buffer_size);
           memcpy(buffer, previous, buffer_size);
           memcpy(previous, swap, buffer_size);
           collapse_buffer(buffer, current_width,
            current_height, highlight_width, highlight_height,
            current_char, screen_mode);
+          free(swap);
         }
         break;
       }
Index: src/edit.c
===================================================================
--- src/edit.c	(revision 334)
+++ src/edit.c	(working copy)
@@ -2346,7 +2346,7 @@
             case 4:
             {
               // Flip block
-              char temp_buffer[block_width];
+              char *temp_buffer = malloc (sizeof(char) * block_width);
               int start_offset = start_x + (start_y * board_width);
               int end_offset = start_x + ((start_y + block_height - 1) *
                board_width);
@@ -2420,6 +2420,8 @@
 
               draw_mode = 0;
               modified = 1;
+
+              free(temp_buffer);
               break;
             }
 
@@ -2670,8 +2672,8 @@
               case 1:
               {
                 // Copy block
-                char char_buffer[block_width * block_height];
-                char color_buffer[block_width * block_height];
+                char *char_buffer = malloc(block_width * block_height);
+                char *color_buffer = malloc(block_width * block_height);
                 copy_layer_to_buffer(start_x, start_y, block_width,
                  block_height, block_board->overlay, block_board->overlay_color,
                  char_buffer, color_buffer, block_board->board_width);
@@ -2687,14 +2689,17 @@
                   copy_repeat_height = block_height;
                 }
                 modified = 1;
+
+                free(color_buffer);
+                free(char_buffer);
                 break;
               }
 
               case 2:
               {
                 // Move block
-                char char_buffer[block_width * block_height];
-                char color_buffer[block_width * block_height];
+                char *char_buffer = malloc(block_width * block_height);
+                char *color_buffer = malloc(block_width * block_height);
                 copy_layer_to_buffer(start_x, start_y, block_width,
                  block_height, block_board->overlay,
                  block_board->overlay_color, char_buffer,
@@ -2707,6 +2712,8 @@
                  overlay_color, board_width);
 
                 modified = 1;
+                free(color_buffer);
+                free(char_buffer);
                 break;
               }
 
@@ -2791,12 +2798,12 @@
               {
                 // Copy block
                 int block_size = block_width * block_height;
-                char id_buffer[block_size];
-                char param_buffer[block_size];
-                char color_buffer[block_size];
-                char under_id_buffer[block_size];
-                char under_param_buffer[block_size];
-                char under_color_buffer[block_size];
+                char *id_buffer = malloc(block_size);
+                char *param_buffer = malloc(block_size);
+                char *color_buffer = malloc(block_size);
+                char *under_id_buffer = malloc(block_size);
+                char *under_param_buffer = malloc(block_size);
+                char *under_color_buffer = malloc(block_size);
                 copy_board_to_board_buffer(block_board, start_x, start_y,
                  block_width, block_height, id_buffer, param_buffer,
                  color_buffer, under_id_buffer, under_param_buffer,
@@ -2815,6 +2822,12 @@
                 }
 
                 modified = 1;
+                free(under_color_buffer);
+                free(under_param_buffer);
+                free(under_id_buffer);
+                free(color_buffer);
+                free(param_buffer);
+                free(id_buffer);
                 break;
               }
 
@@ -2822,12 +2835,12 @@
               {
                 // Move block
                 int block_size = block_width * block_height;
-                char id_buffer[block_size];
-                char param_buffer[block_size];
-                char color_buffer[block_size];
-                char under_id_buffer[block_size];
-                char under_param_buffer[block_size];
-                char under_color_buffer[block_size];
+                char *id_buffer = malloc(block_size);
+                char *param_buffer = malloc(block_size);
+                char *color_buffer = malloc(block_size);
+                char *under_id_buffer = malloc(block_size);
+                char *under_param_buffer = malloc(block_size);
+                char *under_color_buffer = malloc(block_size);
                 copy_board_to_board_buffer(block_board, start_x, start_y,
                  block_width, block_height, id_buffer, param_buffer,
                  color_buffer, under_id_buffer, under_param_buffer,
@@ -2853,6 +2866,11 @@
                  under_color_buffer);
 
                 modified = 1;
+                free(under_color_buffer);
+                free(under_param_buffer);
+                free(under_id_buffer);
+                free(color_buffer);
+                free(param_buffer);
                 break;
               }
 
