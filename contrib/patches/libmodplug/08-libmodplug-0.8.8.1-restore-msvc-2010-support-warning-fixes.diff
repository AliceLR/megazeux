diff -Nudr -U3 libmodplug.pristine/src/fastmix.cpp libmodplug/src/fastmix.cpp
--- libmodplug.pristine/src/fastmix.cpp	2010-06-27 22:04:00.921214193 +0100
+++ libmodplug/src/fastmix.cpp	2010-06-27 22:04:13.790964224 +0100
@@ -9,7 +9,7 @@
 #include "sndfile.h"
 #include <math.h>
 
-#ifdef MSC_VER
+#ifdef _MSC_VER
 #pragma bss_seg(".modplug")
 #endif
 
@@ -27,7 +27,7 @@
 float MixFloatBuffer[MIXBUFFERSIZE*2];
 #endif
 
-#ifdef MSC_VER
+#ifdef _MSC_VER
 #pragma bss_seg()
 #endif
 
@@ -128,7 +128,7 @@
 			if( lut[_LIdx+1]>lut[_LMax] ) _LMax = _LIdx+1;
 			if( lut[_LIdx+2]>lut[_LMax] ) _LMax = _LIdx+2;
 			if( lut[_LIdx+3]>lut[_LMax] ) _LMax = _LIdx+3;
-			lut[_LMax] += (SPLINE_QUANTSCALE-_LSum);
+			lut[_LMax] += (short)(SPLINE_QUANTSCALE-_LSum);
 		}
 #endif
 	}
@@ -1606,12 +1606,12 @@
 }
 
 
-#ifdef MSC_VER
+#ifdef _MSC_VER
 #pragma warning (disable:4100)
 #endif
 
 // Clip and convert to 8 bit
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 __declspec(naked) DWORD MPPASMCALL X86_Convert32To8(LPVOID lp16, int *pBuffer, DWORD lSampleCount, LPLONG lpMin, LPLONG lpMax)
 //------------------------------------------------------------------------------
 {
@@ -1674,7 +1674,7 @@
 	jmp cliprecover
 	}
 }
-#else //MSC_VER
+#else //_MSC_VER
 //---GCCFIX: Asm replaced with C function
 // The C version was written by Rani Assaf <rani@magic.metawire.com>, I believe
 DWORD MPPASMCALL X86_Convert32To8(LPVOID lp8, int *pBuffer, DWORD lSampleCount, LPLONG lpMin, LPLONG lpMax)
@@ -1698,10 +1698,10 @@
 	*lpMax = vumax;
 	return lSampleCount;
 }
-#endif //MSC_VER, else
+#endif //_MSC_VER, else
 
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 // Clip and convert to 16 bit
 __declspec(naked) DWORD MPPASMCALL X86_Convert32To16(LPVOID lp16, int *pBuffer, DWORD lSampleCount, LPLONG lpMin, LPLONG lpMax)
 //------------------------------------------------------------------------------
@@ -1768,7 +1768,7 @@
 	jmp cliprecover
 	}
 }
-#else //MSC_VER
+#else //_MSC_VER
 //---GCCFIX: Asm replaced with C function
 // The C version was written by Rani Assaf <rani@magic.metawire.com>, I believe
 DWORD MPPASMCALL X86_Convert32To16(LPVOID lp16, int *pBuffer, DWORD lSampleCount, LPLONG lpMin, LPLONG lpMax)
@@ -1792,9 +1792,9 @@
 	*lpMax = vumax;
 	return lSampleCount * 2;
 }
-#endif //MSC_VER, else
+#endif //_MSC_VER, else
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 // Clip and convert to 24 bit
 __declspec(naked) DWORD MPPASMCALL X86_Convert32To24(LPVOID lp16, int *pBuffer, DWORD lSampleCount, LPLONG lpMin, LPLONG lpMax)
 //------------------------------------------------------------------------------
@@ -1865,7 +1865,7 @@
 	jmp cliprecover
 	}
 }
-#else //MSC_VER
+#else //_MSC_VER
 //---GCCFIX: Asm replaced with C function
 DWORD MPPASMCALL X86_Convert32To24(LPVOID lp16, int *pBuffer, DWORD lSampleCount, LPLONG lpMin, LPLONG lpMax)
 {
@@ -1902,7 +1902,7 @@
 }
 #endif
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 // Clip and convert to 32 bit
 __declspec(naked) DWORD MPPASMCALL X86_Convert32To32(LPVOID lp16, int *pBuffer, DWORD lSampleCount, LPLONG lpMin, LPLONG lpMax)
 //------------------------------------------------------------------------------
@@ -1992,7 +1992,7 @@
 #endif
 
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 static void MPPASMCALL X86_InitMixBuffer(int *pBuffer, UINT nSamples)
 //------------------------------------------------------------
 {
@@ -2034,7 +2034,7 @@
 #endif
 
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 __declspec(naked) void MPPASMCALL X86_InterleaveFrontRear(int *pFrontBuf, int *pRearBuf, DWORD nSamples)
 //------------------------------------------------------------------------------
 {
@@ -2079,7 +2079,7 @@
 #endif
 
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 VOID MPPASMCALL X86_MonoFromStereo(int *pMixBuf, UINT nSamples)
 //-------------------------------------------------------------
 {
@@ -2113,7 +2113,9 @@
 #endif
 
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
+#define OFSDECAYSHIFT	8
+#define OFSDECAYMASK	0xFF
 void MPPASMCALL X86_StereoFill(int *pBuffer, UINT nSamples, LPLONG lpROfs, LPLONG lpLOfs)
 //------------------------------------------------------------------------------
 {
@@ -2214,7 +2216,7 @@
 }
 #endif
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 static void MPPASMCALL X86_EndChannelOfs(MODCHANNEL *pChannel, int *pBuffer, UINT nSamples)
 //------------------------------------------------------------------------------
 {
@@ -2288,7 +2290,7 @@
 #define MIXING_LIMITMAX		(0x08100000)
 #define MIXING_LIMITMIN		(-MIXING_LIMITMAX)
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 __declspec(naked) UINT MPPASMCALL X86_AGC(int *pBuffer, UINT nSamples, UINT nAGC)
 //------------------------------------------------------------------------------
 {
diff -Nudr -U3 libmodplug.pristine/src/libmodplug/sndfile.h libmodplug/src/libmodplug/sndfile.h
--- libmodplug.pristine/src/libmodplug/sndfile.h	2010-06-27 22:04:00.932213823 +0100
+++ libmodplug/src/libmodplug/sndfile.h	2010-06-27 22:04:13.812963822 +0100
@@ -602,7 +602,7 @@
 	UINT GetMaxPosition() const;
 	void SetCurrentPos(UINT nPos);
 	void SetCurrentOrder(UINT nOrder);
-	void GetTitle(LPSTR s) const { lstrcpyn(s,m_szNames[0],32); }
+	void GetTitle(LPSTR s) const { lstrcpynA(s,m_szNames[0],32); }
 	LPCSTR GetTitle() const { return m_szNames[0]; }
 	UINT GetSampleName(UINT nSample,LPSTR s=NULL) const;
 	UINT GetInstrumentName(UINT nInstr,LPSTR s=NULL) const;
@@ -932,7 +932,7 @@
 #define AGC_UNITY			(1 << AGC_PRECISION)
 
 // Calling conventions
-#ifdef MSC_VER
+#ifdef _MSC_VER
 #define MPPASMCALL	__cdecl
 #define MPPFASTCALL	__fastcall
 #else
diff -Nudr -U3 libmodplug.pristine/src/libmodplug/stdafx.h libmodplug/src/libmodplug/stdafx.h
--- libmodplug.pristine/src/libmodplug/stdafx.h	2010-06-27 22:04:00.965201561 +0100
+++ libmodplug/src/libmodplug/stdafx.h	2010-06-27 22:04:26.526201252 +0100
@@ -24,11 +24,6 @@
 
 #ifdef _WIN32
 
-#ifdef MSC_VER
-#pragma warning (disable:4201)
-#pragma warning (disable:4514)
-#endif
-
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <windowsx.h>
@@ -38,9 +33,9 @@
 
 #define srandom(_seed)  srand(_seed)
 #define random()        rand()
-#define sleep(_ms)      Sleep(_ms)
+#define sleep(_ms)      Sleep(_ms * 1000)
 
-inline void ProcessPlugins(int n) {}
+static inline void ProcessPlugins(int n) {}
 
 #else
 
@@ -54,6 +49,7 @@
 typedef int8_t CHAR;
 typedef uint8_t UCHAR;
 typedef uint8_t* PUCHAR;
+typedef int16_t SHORT;
 typedef uint16_t USHORT;
 typedef uint32_t ULONG;
 typedef uint32_t UINT;
@@ -82,9 +78,9 @@
 #define MODPLUG_NO_FILESAVE
 #define NO_AGC
 #define LPCTSTR LPCSTR
-#define lstrcpyn strncpy
-#define lstrcpy strcpy
-#define lstrcmp strcmp
+#define lstrcpynA strncpy
+#define lstrcpyA strcpy
+#define lstrcmpA strcmp
 #define WAVE_FORMAT_PCM 1
 //#define ENABLE_EQ
 
@@ -102,8 +98,8 @@
 
 #define GlobalFreePtr(p) free((void *)(p))
 
-#define strnicmp(a,b,c)		strncasecmp(a,b,c)
-#define wsprintf			sprintf
+#define _strnicmp(a,b,c)	strncasecmp(a,b,c)
+#define wsprintfA		sprintf
 
 #ifndef FALSE
 #define FALSE	false
diff -Nudr -U3 libmodplug.pristine/src/load_amf.cpp libmodplug/src/load_amf.cpp
--- libmodplug.pristine/src/load_amf.cpp	2010-06-27 22:04:01.032214480 +0100
+++ libmodplug/src/load_amf.cpp	2010-06-27 22:04:13.900065501 +0100
@@ -170,7 +170,7 @@
 	DWORD dwMemPos;
 	
 	if ((!lpStream) || (dwMemLength < 2048)) return FALSE;
-	if ((!strncmp((LPCTSTR)lpStream, "ASYLUM Music Format V1.0", 25)) && (dwMemLength > 4096))
+	if ((!strncmp((const char *)lpStream, "ASYLUM Music Format V1.0", 25)) && (dwMemLength > 4096))
 	{
 		UINT numorders, numpats, numsamples;
 
diff -Nudr -U3 libmodplug.pristine/src/load_it.cpp libmodplug/src/load_it.cpp
--- libmodplug.pristine/src/load_it.cpp	2010-06-27 22:04:01.056963599 +0100
+++ libmodplug/src/load_it.cpp	2010-06-27 22:04:13.917007535 +0100
@@ -626,7 +626,7 @@
 	dwPatNamLen = 0;
 	dwChnNamLen = 0;
 	header.id = 0x4D504D49; // IMPM
-	lstrcpyn((char *)header.songname, m_szNames[0], 27);
+	lstrcpynA((char *)header.songname, m_szNames[0], 27);
 	header.reserved1 = 0x1004;
 	header.ordnum = 0;
 	while ((header.ordnum < MAX_ORDERS) && (Order[header.ordnum] < 0xFF)) header.ordnum++;
@@ -691,7 +691,7 @@
 	if (m_lpszSongComments)
 	{
 		header.special |= 1;
-		header.msglength = strlen(m_lpszSongComments)+1;
+		header.msglength = (WORD)strlen(m_lpszSongComments)+1;
 		header.msgoffset = dwHdrPos + dwExtra + header.insnum*4 + header.patnum*4 + header.smpnum*4;
 	}
 	// Write file header
@@ -769,7 +769,7 @@
 	dwPos = dwHdrPos + dwExtra + (header.insnum + header.smpnum + header.patnum) * 4;
 	if (header.special & 1)
 	{
-		dwPos += strlen(m_lpszSongComments) + 1;
+		dwPos += (DWORD)strlen(m_lpszSongComments) + 1;
 		fwrite(m_lpszSongComments, 1, strlen(m_lpszSongComments)+1, f);
 	}
 	// Writing instruments
diff -Nudr -U3 libmodplug.pristine/src/load_med.cpp libmodplug/src/load_med.cpp
--- libmodplug.pristine/src/load_med.cpp	2010-06-27 22:04:01.091976414 +0100
+++ libmodplug/src/load_med.cpp	2010-06-27 22:04:13.950963958 +0100
@@ -670,8 +670,8 @@
 			}
 		}
 		// Song Comments
-		uint32_t annotxt = bswapBE32(pmex->annotxt);
-		uint32_t annolen = bswapBE32(pmex->annolen);
+		DWORD annotxt = bswapBE32(pmex->annotxt);
+		DWORD annolen = bswapBE32(pmex->annolen);
 		if ((annotxt) && (annolen) && (annotxt + annolen > annotxt) // overflow checks.
 				&& (annotxt+annolen <= dwMemLength))
 		{
@@ -680,8 +680,8 @@
 			m_lpszSongComments[annolen] = 0;
 		}
 		// Song Name
-		uint32_t songname = bswapBE32(pmex->songname);
-		uint32_t songnamelen = bswapBE32(pmex->songnamelen);
+		DWORD songname = bswapBE32(pmex->songname);
+		DWORD songnamelen = bswapBE32(pmex->songnamelen);
 		if ((songname) && (songnamelen) && (songname+songnamelen > songname)
 				&& (songname+songnamelen <= dwMemLength))
 		{
@@ -707,7 +707,7 @@
 				if (maxnamelen > 32) maxnamelen = 32;
 				for (UINT i=0; i<ientries; i++) if (i < m_nSamples)
 				{
-					lstrcpyn(m_szNames[i+1], psznames + i*ientrysz, maxnamelen);
+					lstrcpynA(m_szNames[i+1], psznames + i*ientrysz, maxnamelen);
 					m_szNames[i+1][31] = '\0';
 				}
 			}
@@ -738,7 +738,7 @@
 					if (trknamelen > MAX_CHANNELNAME) trknamelen = MAX_CHANNELNAME;
 					if ((trknameofs) && (trknameofs + trknamelen < dwMemLength))
 					{
-						lstrcpyn(ChnSettings[i].szName, (LPCSTR)(lpStream+trknameofs), MAX_CHANNELNAME);
+						lstrcpynA(ChnSettings[i].szName, (LPCSTR)(lpStream+trknameofs), MAX_CHANNELNAME);
 						ChnSettings[i].szName[MAX_CHANNELNAME-1] = '\0';
 					}
 				}
diff -Nudr -U3 libmodplug.pristine/src/load_mod.cpp libmodplug/src/load_mod.cpp
--- libmodplug.pristine/src/load_mod.cpp	2010-06-27 22:04:01.142282276 +0100
+++ libmodplug/src/load_mod.cpp	2010-06-27 22:04:13.967963742 +0100
@@ -342,7 +342,7 @@
 		LPSTR p = (LPSTR)(lpStream+dwMemPos);
 		UINT flags = 0;
 		if (dwMemPos + 5 >= dwMemLength) break;
-		if (!strnicmp(p, "ADPCM", 5))
+		if (!_strnicmp(p, "ADPCM", 5))
 		{
 			flags = 3;
 			p += 5;
@@ -437,9 +437,9 @@
 	fwrite(ord, 128, 1, f);
 	// Writing signature
 	if (m_nChannels == 4)
-		lstrcpy((LPSTR)&bTab, "M.K.");
+		lstrcpyA((LPSTR)&bTab, "M.K.");
 	else
-		wsprintf((LPSTR)&bTab, "%luCHN", m_nChannels);
+		wsprintfA((LPSTR)&bTab, "%luCHN", m_nChannels);
 	fwrite(bTab, 4, 1, f);
 	// Writing patterns
 	for (UINT ipat=0; ipat<nbp; ipat++) if (Patterns[ipat])
diff -Nudr -U3 libmodplug.pristine/src/load_s3m.cpp libmodplug/src/load_s3m.cpp
--- libmodplug.pristine/src/load_s3m.cpp	2010-06-27 22:04:01.159964383 +0100
+++ libmodplug/src/load_s3m.cpp	2010-06-27 22:04:13.984963850 +0100
@@ -285,7 +285,7 @@
 		insflags[iSmp-1] = s[0x1F];
 		inspack[iSmp-1] = s[0x1E];
 		s[0x4C] = 0;
-		lstrcpy(m_szNames[iSmp], (LPCSTR)&s[0x30]);
+		lstrcpyA(m_szNames[iSmp], (LPCSTR)&s[0x30]);
 		if ((s[0]==1) && (s[0x4E]=='R') && (s[0x4F]=='S'))
 		{
 			UINT j = bswapLE32(*((LPDWORD)(s+0x10)));
diff -Nudr -U3 libmodplug.pristine/src/load_stm.cpp libmodplug/src/load_stm.cpp
--- libmodplug.pristine/src/load_stm.cpp	2010-06-27 22:04:01.209788900 +0100
+++ libmodplug/src/load_stm.cpp	2010-06-27 22:04:14.025117764 +0100
@@ -64,8 +64,8 @@
 	
 	if ((!lpStream) || (dwMemLength < sizeof(STMHEADER))) return FALSE;
 	if ((phdr->filetype != 2) || (phdr->unused != 0x1A)
-	 || ((strnicmp(phdr->trackername, "!SCREAM!", 8))
-	  && (strnicmp(phdr->trackername, "BMOD2STM", 8)))) return FALSE;
+	 || ((_strnicmp(phdr->trackername, "!SCREAM!", 8))
+	  && (_strnicmp(phdr->trackername, "BMOD2STM", 8)))) return FALSE;
 	memcpy(m_szNames[0], phdr->songname, 20);
 	// Read STM header
 	m_nType = MOD_TYPE_STM;
diff -Nudr -U3 libmodplug.pristine/src/load_xm.cpp libmodplug/src/load_xm.cpp
--- libmodplug.pristine/src/load_xm.cpp	2010-06-27 22:04:01.226963989 +0100
+++ libmodplug/src/load_xm.cpp	2010-06-27 22:04:14.042024845 +0100
@@ -11,7 +11,7 @@
 ////////////////////////////////////////////////////////
 // FastTracker II XM file support
 
-#ifdef MSC_VER
+#ifdef _MSC_VER
 #pragma warning(disable:4244)
 #endif
 
@@ -88,7 +88,7 @@
 
 	m_nChannels = 0;
 	if ((!lpStream) || (dwMemLength < 0x200)) return FALSE;
-	if (strnicmp((LPCSTR)lpStream, "Extended Module", 15)) return FALSE;
+	if (_strnicmp((LPCSTR)lpStream, "Extended Module", 15)) return FALSE;
 
 	memcpy(m_szNames[0], lpStream+17, 20);
 	dwHdrSize = bswapLE32(*((DWORD *)(lpStream+60)));
@@ -600,7 +600,7 @@
 	fwrite("Extended Module: ", 17, 1, f);
 	fwrite(m_szNames[0], 20, 1, f);
 	s[0] = 0x1A;
-	lstrcpy((LPSTR)&s[1], (nPacking) ? "MOD Plugin packed   " : "FastTracker v2.00   ");
+	lstrcpyA((LPSTR)&s[1], (nPacking) ? "MOD Plugin packed   " : "FastTracker v2.00   ");
 	s[21] = 0x04;
 	s[22] = 0x01;
 	fwrite(s, 23, 1, f);
@@ -837,7 +837,7 @@
 	{
 		DWORD d = 0x74786574;
 		fwrite(&d, 1, 4, f);
-		d = strlen(m_lpszSongComments);
+		d = (DWORD)strlen(m_lpszSongComments);
 		fwrite(&d, 1, 4, f);
 		fwrite(m_lpszSongComments, 1, d, f);
 	}
diff -Nudr -U3 libmodplug.pristine/src/sndfile.cpp libmodplug/src/sndfile.cpp
--- libmodplug.pristine/src/sndfile.cpp	2010-06-27 22:04:01.257963753 +0100
+++ libmodplug/src/sndfile.cpp	2010-06-27 22:04:14.074232246 +0100
@@ -378,13 +378,13 @@
 //-----------------------------
 {
 	memset(&m_MidiCfg, 0, sizeof(m_MidiCfg));
-	lstrcpy(&m_MidiCfg.szMidiGlb[MIDIOUT_START*32], "FF");
-	lstrcpy(&m_MidiCfg.szMidiGlb[MIDIOUT_STOP*32], "FC");
-	lstrcpy(&m_MidiCfg.szMidiGlb[MIDIOUT_NOTEON*32], "9c n v");
-	lstrcpy(&m_MidiCfg.szMidiGlb[MIDIOUT_NOTEOFF*32], "9c n 0");
-	lstrcpy(&m_MidiCfg.szMidiGlb[MIDIOUT_PROGRAM*32], "Cc p");
-	lstrcpy(&m_MidiCfg.szMidiSFXExt[0], "F0F000z");
-	for (int iz=0; iz<16; iz++) wsprintf(&m_MidiCfg.szMidiZXXExt[iz*32], "F0F001%02X", iz*8);
+	lstrcpyA(&m_MidiCfg.szMidiGlb[MIDIOUT_START*32], "FF");
+	lstrcpyA(&m_MidiCfg.szMidiGlb[MIDIOUT_STOP*32], "FC");
+	lstrcpyA(&m_MidiCfg.szMidiGlb[MIDIOUT_NOTEON*32], "9c n v");
+	lstrcpyA(&m_MidiCfg.szMidiGlb[MIDIOUT_NOTEOFF*32], "9c n 0");
+	lstrcpyA(&m_MidiCfg.szMidiGlb[MIDIOUT_PROGRAM*32], "Cc p");
+	lstrcpyA(&m_MidiCfg.szMidiSFXExt[0], "F0F000z");
+	for (int iz=0; iz<16; iz++) wsprintfA(&m_MidiCfg.szMidiZXXExt[iz*32], "F0F001%02X", iz*8);
 }
 
 
@@ -794,7 +794,7 @@
 	memcpy(sztmp, m_szNames[nSample],32);
 	sztmp[31] = 0;
 	if (s) strcpy(s, sztmp);
-	return strlen(sztmp);
+	return (UINT)strlen(sztmp);
 }
 
 
@@ -811,7 +811,7 @@
 	memcpy(sztmp, penv->name, 32);
 	sztmp[31] = 0;
 	if (s) strcpy(s, sztmp);
-	return strlen(sztmp);
+	return (UINT)strlen(sztmp);
 }
 
 
@@ -923,7 +923,7 @@
 	case RS_PCM16D:
 	case RS_PCM16S:
 		{
-			int16_t *p = (int16_t *)pSample;
+			SHORT *p = (SHORT *)pSample;
 			int s_old = 0, s_ofs;
 			len = nLen * 2;
 			bufcount = 0;
@@ -939,13 +939,13 @@
 				}
 				if (nFlags == RS_PCM16D)
 				{
-					int16_t temp = bswapLE16((int16_t)(s_new - s_old));
-					memcpy(&buffer[bufcount], &temp, sizeof(int16_t));
+					SHORT temp = bswapLE16((SHORT)(s_new - s_old));
+					memcpy(&buffer[bufcount], &temp, sizeof(SHORT));
 					s_old = s_new;
 				} else
 				{
-					int16_t temp = bswapLE16((int16_t)(s_new + s_ofs));
-					memcpy(&buffer[bufcount], &temp, sizeof(int16_t));
+					SHORT temp = bswapLE16((SHORT)(s_new + s_ofs));
+					memcpy(&buffer[bufcount], &temp, sizeof(SHORT));
 				}
 				bufcount += 2;
 				if (bufcount >= sizeof(buffer) - 1)
@@ -1003,7 +1003,7 @@
 			int s_ofs = (nFlags == RS_STPCM16U) ? 0x8000 : 0;
 			for (UINT iCh=0; iCh<2; iCh++)
 			{
-				int16_t *p = ((int16_t *)pSample) + iCh;
+				SHORT *p = ((SHORT *)pSample) + iCh;
 				int s_old = 0;
 
 				bufcount = 0;
@@ -1013,13 +1013,13 @@
 					p += 2;
 					if (nFlags == RS_STPCM16D)
 					{
-						int16_t temp = bswapLE16((int16_t)(s_new - s_old));
-						memcpy(&buffer[bufcount], &temp, sizeof(int16_t));
+						SHORT temp = bswapLE16((SHORT)(s_new - s_old));
+						memcpy(&buffer[bufcount], &temp, sizeof(SHORT));
 						s_old = s_new;
 					} else
 					{
-						int16_t temp = bswapLE16((int16_t)(s_new - s_ofs));
-						memcpy(&buffer[bufcount], &temp, sizeof(int16_t));
+						SHORT temp = bswapLE16((SHORT)(s_new - s_ofs));
+						memcpy(&buffer[bufcount], &temp, sizeof(SHORT));
 					}
 					bufcount += 2;
 					if (bufcount >= sizeof(buffer))
@@ -1174,13 +1174,13 @@
 		{
 			len = pIns->nLength * 2;
 			if (len > dwMemLength) break;
-			int16_t *pSample = (int16_t *)pIns->pSample;
-			int16_t *p = (int16_t *)lpMemFile;
+			SHORT *pSample = (SHORT *)pIns->pSample;
+			SHORT *p = (SHORT *)lpMemFile;
 			int delta16 = 0;
 			for (UINT j=0; j<len; j+=2)
 			{
 				delta16 += bswapLE16(*p++);
-				*pSample++ = (int16_t )delta16;
+				*pSample++ = (SHORT )delta16;
 			}
 		}
 		break;
@@ -1190,10 +1190,10 @@
 	        {
 		len = pIns->nLength * 2;
 		if (len <= dwMemLength) memcpy(pIns->pSample, lpMemFile, len);
-			int16_t *pSample = (int16_t *)pIns->pSample;
+			SHORT *pSample = (SHORT *)pIns->pSample;
 			for (UINT j=0; j<len; j+=2)
 			{
-				int16_t rawSample = *pSample;
+				SHORT rawSample = *pSample;
 			        *pSample++ = bswapLE16(rawSample);
 			}
 		}
@@ -1211,7 +1211,7 @@
 			{
 			  	// pSample[j] = pSrc[j+1];
 				// pSample[j+1] = pSrc[j];
-			        *((uint16_t *)(pSample+j)) = bswapBE16(*((uint16_t *)(pSrc+j)));
+			        *((WORD *)(pSample+j)) = bswapBE16(*((WORD *)(pSrc+j)));
 			}
 		}
 		break;
@@ -1221,8 +1221,8 @@
 		{
 			len = pIns->nLength * 2;
 			if (len > dwMemLength) break;
-			int16_t *pSample = (int16_t *)pIns->pSample;
-			int16_t *pSrc = (int16_t *)lpMemFile;
+			SHORT *pSample = (SHORT *)pIns->pSample;
+			SHORT *pSrc = (SHORT *)lpMemFile;
 			for (UINT j=0; j<len; j+=2) *pSample++ = bswapLE16(*(pSrc++)) - 0x8000;
 		}
 		break;
@@ -1240,8 +1240,8 @@
 				// pSample[j*2+1] = pSrc[j];
 				// pSample[j*2+2] = pSrc[j+1+len];
 				// pSample[j*2+3] = pSrc[j+len];
-			        *((uint16_t *)(pSample+j*2)) = bswapBE16(*((uint16_t *)(pSrc+j)));
-				*((uint16_t *)(pSample+j*2+2)) = bswapBE16(*((uint16_t *)(pSrc+j+len)));
+			        *((WORD *)(pSample+j*2)) = bswapBE16(*((WORD *)(pSrc+j)));
+				*((WORD *)(pSample+j*2+2)) = bswapBE16(*((WORD *)(pSrc+j+len)));
 			}
 			len *= 2;
 		}
@@ -1281,13 +1281,13 @@
 			int iadd_l = 0, iadd_r = 0;
 			if (nFlags == RS_STPCM16U) { iadd_l = iadd_r = -0x8000; }
 			len = pIns->nLength;
-			int16_t *psrc = (int16_t *)lpMemFile;
-			int16_t *pSample = (int16_t *)pIns->pSample;
+			SHORT *psrc = (SHORT *)lpMemFile;
+			SHORT *pSample = (SHORT *)pIns->pSample;
 			if (len*4 > dwMemLength) break;
 			for (UINT j=0; j<len; j++)
 			{
-				pSample[j*2] = (int16_t) (bswapLE16(psrc[0]) + iadd_l);
-				pSample[j*2+1] = (int16_t) (bswapLE16(psrc[len]) + iadd_r);
+				pSample[j*2] = (SHORT) (bswapLE16(psrc[0]) + iadd_l);
+				pSample[j*2+1] = (SHORT) (bswapLE16(psrc[len]) + iadd_r);
 				psrc++;
 				if (nFlags == RS_STPCM16D)
 				{
@@ -1342,12 +1342,12 @@
 			if (nFlags == RS_STIPCM16U) iadd = -32768;
 			len = pIns->nLength;
 			if (len*4 > dwMemLength) len = dwMemLength >> 2;
-			int16_t *psrc = (int16_t *)lpMemFile;
-			int16_t *pSample = (int16_t *)pIns->pSample;
+			SHORT *psrc = (SHORT *)lpMemFile;
+			SHORT *pSample = (SHORT *)pIns->pSample;
 			for (UINT j=0; j<len; j++)
 			{
-				pSample[j*2] = (int16_t)(bswapLE16(psrc[0]) + iadd);
-				pSample[j*2+1] = (int16_t)(bswapLE16(psrc[1]) + iadd);
+				pSample[j*2] = (SHORT)(bswapLE16(psrc[0]) + iadd);
+				pSample[j*2+1] = (SHORT)(bswapLE16(psrc[1]) + iadd);
 				psrc += 2;
 			}
 			len *= 4;
@@ -1466,7 +1466,7 @@
 				if (-l > max) max = -l;
 			}
 			max = (max / 128) + 1;
-			int16_t *pDest = (int16_t *)pIns->pSample;
+			SHORT *pDest = (SHORT *)pIns->pSample;
 			for (UINT k=0; k<len; k+=slsize)
 			{
 				LONG l = ((((pSrc[k+2] << 8) + pSrc[k+1]) << 8) + pSrc[k]) << 8;
@@ -1495,14 +1495,14 @@
 				if (-l > max) max = -l;
 			}
 			max = (max / 128) + 1;
-			int16_t *pDest = (int16_t *)pIns->pSample;
+			SHORT *pDest = (SHORT *)pIns->pSample;
 			for (UINT k=0; k<len; k+=slsize)
 			{
 				LONG lr = ((((pSrc[k+2] << 8) + pSrc[k+1]) << 8) + pSrc[k]) << 8;
 				k += slsize;
 				LONG ll = ((((pSrc[k+2] << 8) + pSrc[k+1]) << 8) + pSrc[k]) << 8;
-				pDest[0] = (int16_t)ll;
-				pDest[1] = (int16_t)lr;
+				pDest[0] = (SHORT)ll;
+				pDest[1] = (SHORT)lr;
 				pDest += 2;
 			}
 		}
@@ -1514,11 +1514,11 @@
 			len = pIns->nLength;
 			if (len*4 > dwMemLength) len = dwMemLength >> 2;
 			LPCBYTE psrc = (LPCBYTE)lpMemFile;
-			int16_t *pSample = (int16_t *)pIns->pSample;
+			SHORT *pSample = (SHORT *)pIns->pSample;
 			for (UINT j=0; j<len; j++)
 			{
-				pSample[j*2] = (int16_t)(((UINT)psrc[0] << 8) | (psrc[1]));
-				pSample[j*2+1] = (int16_t)(((UINT)psrc[2] << 8) | (psrc[3]));
+				pSample[j*2] = (SHORT)(((UINT)psrc[0] << 8) | (psrc[1]));
+				pSample[j*2+1] = (SHORT)(((UINT)psrc[2] << 8) | (psrc[3]));
 				psrc += 4;
 			}
 			len *= 4;
@@ -1563,7 +1563,7 @@
 	UINT len = pIns->nLength;
 	if (pIns->uFlags & CHN_16BIT)
 	{
-		int16_t *pSample = (int16_t *)pIns->pSample;
+		SHORT *pSample = (SHORT *)pIns->pSample;
 		// Adjust end of sample
 		if (pIns->uFlags & CHN_STEREO)
 		{
@@ -1649,9 +1649,9 @@
 //-----------------------------------------------------------
 {
 	//---GCCFIX:  Removed assembly.
-	return (DWORD)(8363*pow(2, (transp*128+ftune)/(1536)));
+	return (DWORD)(8363*pow(2.0, (transp*128+ftune)/(1536)));
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 	const float _fbase = 8363;
 	const float _factor = 1.0f/(12.0f*128.0f);
 	int result;
@@ -1689,9 +1689,9 @@
 //----------------------------------------------
 {
 	//---GCCFIX:  Removed assembly.
-	return int(1536*(log(freq/8363)/log(2)));
+	return int(1536*(log((double)freq/8363.0)/log(2.0)));
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 	const float _f1_8363 = 1.0f / 8363.0f;
 	const float _factor = 128 * 12;
 	LONG result;
@@ -1763,7 +1763,7 @@
 {
         char szName[MAX_PATTERNNAME] = "";   // changed from CHAR
 	if (nPat >= MAX_PATTERNS) return FALSE;
-	if (lpszName) lstrcpyn(szName, lpszName, MAX_PATTERNNAME);
+	if (lpszName) lstrcpynA(szName, lpszName, MAX_PATTERNNAME);
 	szName[MAX_PATTERNNAME-1] = 0;
 	if (!m_lpszPatternNames) m_nPatternNames = 0;
 	if (nPat >= m_nPatternNames)
diff -Nudr -U3 libmodplug.pristine/src/snd_flt.cpp libmodplug/src/snd_flt.cpp
--- libmodplug.pristine/src/snd_flt.cpp	2010-06-27 22:04:01.293963538 +0100
+++ libmodplug/src/snd_flt.cpp	2010-06-27 22:04:14.094170846 +0100
@@ -13,7 +13,7 @@
 
 #ifndef NO_FILTER
 
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 #define _ASM_MATH
 #endif
 
@@ -80,7 +80,7 @@
 	float d = (1.0f-2.0f*dmpfac)* fc;
 	if (d>2.0) d = 2.0;
 	d = (2.0f*dmpfac - d)/fc;
-	float e = pow(1.0f/fc,2.0);
+	float e = pow(1.0f/fc,2.0f);
 
 	fg=1/(1+d+e);
 	fb0=(d+e+e)/(1+d+e);
diff -Nudr -U3 libmodplug.pristine/src/snd_fx.cpp libmodplug/src/snd_fx.cpp
--- libmodplug.pristine/src/snd_fx.cpp	2010-06-27 22:04:01.316963500 +0100
+++ libmodplug/src/snd_fx.cpp	2010-06-27 22:04:14.108000084 +0100
@@ -4,11 +4,13 @@
  * Authors: Olivier Lapicque <olivierl@jps.net>
 */
 
+#include <stdlib.h>
+
 #include "stdafx.h"
 #include "sndfile.h"
 #include "tables.h"
 
-#ifdef MSC_VER
+#ifdef _MSC_VER
 #pragma warning(disable:4244)
 #endif
 
diff -Nudr -U3 libmodplug.pristine/src/sndmix.cpp libmodplug/src/sndmix.cpp
--- libmodplug.pristine/src/sndmix.cpp	2010-06-27 22:04:01.356963593 +0100
+++ libmodplug/src/sndmix.cpp	2010-06-27 22:04:14.182964244 +0100
@@ -82,7 +82,7 @@
 // Return (a*b)/c - no divide error
 int _muldiv(long a, long b, long c)
 {
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 	int sign, result;
 	_asm {
 	mov eax, a
@@ -129,7 +129,7 @@
 // Return (a*b+c/2)/c - no divide error
 int _muldivr(long a, long b, long c)
 {
-#ifdef MSC_VER
+#if defined(_MSC_VER) && !defined(_WIN64)
 	int sign, result;
 	_asm {
 	mov eax, a
diff -Nudr -U3 libmodplug.pristine/src/tables.h libmodplug/src/tables.h
--- libmodplug.pristine/src/tables.h	2010-06-27 22:04:01.374963586 +0100
+++ libmodplug/src/tables.h	2010-06-27 22:04:14.241057864 +0100
@@ -68,7 +68,7 @@
 
 
 // Sinus table
-static const int16_t ModSinusTable[64] =
+static const SHORT ModSinusTable[64] =
 {
 	0,12,25,37,49,60,71,81,90,98,106,112,117,122,125,126,
 	127,126,125,122,117,112,106,98,90,81,71,60,49,37,25,12,
@@ -77,7 +77,7 @@
 };
 
 // Triangle wave table (ramp down)
-static const int16_t ModRampDownTable[64] =
+static const SHORT ModRampDownTable[64] =
 {
 	0,-4,-8,-12,-16,-20,-24,-28,-32,-36,-40,-44,-48,-52,-56,-60,
 	-64,-68,-72,-76,-80,-84,-88,-92,-96,-100,-104,-108,-112,-116,-120,-124,
@@ -86,7 +86,7 @@
 };
 
 // Square wave table
-static const int16_t ModSquareTable[64] =
+static const SHORT ModSquareTable[64] =
 {
 	127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
 	127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
@@ -95,7 +95,7 @@
 };
 
 // Random wave table
-static const int16_t ModRandomTable[64] =
+static const SHORT ModRandomTable[64] =
 {
 	98,-127,-43,88,102,41,-65,-94,125,20,-71,-86,-70,-32,-16,-96,
 	17,72,107,-5,116,-69,-62,-40,10,-61,65,109,-18,-38,-13,-76,
@@ -105,10 +105,10 @@
 
 
 // volume fade tables for Retrig Note:
-static const int8_t retrigTable1[16] =
+static const CHAR retrigTable1[16] =
 { 0, 0, 0, 0, 0, 0, 10, 8, 0, 0, 0, 0, 0, 0, 24, 32 };
 
-static const int8_t retrigTable2[16] =
+static const CHAR retrigTable2[16] =
 { 0, -1, -2, -4, -8, -16, 0, 0, 0, 1, 2, 4, 8, 16, 0, 0 };
 
 
@@ -125,7 +125,7 @@
 };
 
 
-static const uint32_t XMLinearTable[768] = 
+static const DWORD XMLinearTable[768] = 
 {
 	535232,534749,534266,533784,533303,532822,532341,531861,
 	531381,530902,530423,529944,529466,528988,528511,528034,
@@ -227,7 +227,7 @@
 };
 
 
-static const int8_t ft2VibratoTable[256] = 
+static const CHAR ft2VibratoTable[256] = 
 {
 	0,-2,-3,-5,-6,-8,-9,-11,-12,-14,-16,-17,-19,-20,-22,-23,
 	-24,-26,-27,-29,-30,-32,-33,-34,-36,-37,-38,-39,-41,-42,
