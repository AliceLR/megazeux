diff -Nudr -U3 -x .svn libmodplug.pristine/src/fastmix.cpp libmodplug/src/fastmix.cpp
--- libmodplug.pristine/src/fastmix.cpp	2009-12-31 16:56:03.000000000 +0000
+++ libmodplug/src/fastmix.cpp	2009-12-31 17:11:13.000000000 +0000
@@ -568,7 +568,7 @@
 typedef VOID (MPPASMCALL * LPMIXINTERFACE)(MODCHANNEL *, int *, int *);
 
 #define BEGIN_MIX_INTERFACE(func)\
-	VOID MPPASMCALL func(MODCHANNEL *pChannel, int *pbuffer, int *pbufmax)\
+	static VOID MPPASMCALL func(MODCHANNEL *pChannel, int *pbuffer, int *pbufmax)\
 	{\
 		LONG nPos;
 
@@ -659,8 +659,8 @@
 /////////////////////////////////////////////////////
 //
 
-void MPPASMCALL X86_InitMixBuffer(int *pBuffer, UINT nSamples);
-void MPPASMCALL X86_EndChannelOfs(MODCHANNEL *pChannel, int *pBuffer, UINT nSamples);
+static void MPPASMCALL X86_InitMixBuffer(int *pBuffer, UINT nSamples);
+static void MPPASMCALL X86_EndChannelOfs(MODCHANNEL *pChannel, int *pBuffer, UINT nSamples);
 void MPPASMCALL X86_StereoFill(int *pBuffer, UINT nSamples, LPLONG lpROfs, LPLONG lpLOfs);
 void X86_StereoMixToFloat(const int *, float *, float *, UINT nCount);
 void X86_FloatToStereoMix(const float *pIn1, const float *pIn2, int *pOut, UINT nCount);
@@ -794,6 +794,8 @@
 	SNDMIX_STOREFASTMONOVOL
 END_MIX_INTERFACE()
 
+#ifdef MODPLUG_DEADCODE
+
 BEGIN_MIX_INTERFACE(FastMono8BitSplineMix)
 	SNDMIX_BEGINSAMPLELOOP8
 	SNDMIX_GETMONOVOL8SPLINE
@@ -818,6 +820,7 @@
 	SNDMIX_STOREFASTMONOVOL
 END_MIX_INTERFACE()
 
+#endif // MODPLUG_DEADCODE
 
 // Fast Ramps
 BEGIN_FASTRAMPMIX_INTERFACE(FastMono8BitRampMix)
@@ -844,6 +847,8 @@
 	SNDMIX_RAMPFASTMONOVOL
 END_FASTRAMPMIX_INTERFACE()
 
+#ifdef MODPLUG_DEADCODE
+
 BEGIN_FASTRAMPMIX_INTERFACE(FastMono8BitSplineRampMix)
 	SNDMIX_BEGINSAMPLELOOP8
 	SNDMIX_GETMONOVOL8SPLINE
@@ -868,6 +873,7 @@
 	SNDMIX_RAMPFASTMONOVOL
 END_FASTRAMPMIX_INTERFACE()
 
+#endif // MODPLUG_DEADCODE
 
 //////////////////////////////////////////////////////
 // Stereo samples
@@ -1987,7 +1993,7 @@
 
 
 #ifdef MSC_VER
-void MPPASMCALL X86_InitMixBuffer(int *pBuffer, UINT nSamples)
+static void MPPASMCALL X86_InitMixBuffer(int *pBuffer, UINT nSamples)
 //------------------------------------------------------------
 {
 	_asm {
@@ -2021,7 +2027,7 @@
 #else
 //---GCCFIX: Asm replaced with C function
 // Will fill in later.
-void MPPASMCALL X86_InitMixBuffer(int *pBuffer, UINT nSamples)
+static void MPPASMCALL X86_InitMixBuffer(int *pBuffer, UINT nSamples)
 {
 	memset(pBuffer, 0, nSamples * sizeof(int));
 }
@@ -2209,7 +2215,7 @@
 #endif
 
 #ifdef MSC_VER
-void MPPASMCALL X86_EndChannelOfs(MODCHANNEL *pChannel, int *pBuffer, UINT nSamples)
+static void MPPASMCALL X86_EndChannelOfs(MODCHANNEL *pChannel, int *pBuffer, UINT nSamples)
 //------------------------------------------------------------------------------
 {
 	_asm {
@@ -2252,7 +2258,7 @@
 #else
 //---GCCFIX: Asm replaced with C function
 // Will fill in later.
-void MPPASMCALL X86_EndChannelOfs(MODCHANNEL *pChannel, int *pBuffer, UINT nSamples)
+static void MPPASMCALL X86_EndChannelOfs(MODCHANNEL *pChannel, int *pBuffer, UINT nSamples)
 {
 	int rofs = pChannel->nROfs;
 	int lofs = pChannel->nLOfs;
diff -Nudr -U3 -x .svn libmodplug.pristine/src/libmodplug/it_defs.h libmodplug/src/libmodplug/it_defs.h
--- libmodplug.pristine/src/libmodplug/it_defs.h	2004-09-10 06:19:07.000000000 +0100
+++ libmodplug/src/libmodplug/it_defs.h	2009-12-31 17:06:42.000000000 +0000
@@ -128,7 +128,4 @@
 
 #pragma pack()
 
-extern BYTE autovibit2xm[8];
-extern BYTE autovibxm2it[8];
-
 #endif
diff -Nudr -U3 -x .svn libmodplug.pristine/src/libmodplug/stdafx.h libmodplug/src/libmodplug/stdafx.h
--- libmodplug.pristine/src/libmodplug/stdafx.h	2009-12-31 16:33:36.000000000 +0000
+++ libmodplug/src/libmodplug/stdafx.h	2009-12-31 17:05:45.000000000 +0000
@@ -95,7 +95,7 @@
 typedef const char* LPCSTR;
 typedef void* PVOID;
 
-inline LONG MulDiv (long a, long b, long c)
+static inline LONG MulDiv (long a, long b, long c)
 {
   // if (!c) return 0;
   return ((uint64_t) a * (uint64_t) b ) / c;
@@ -112,7 +112,7 @@
 
 #define  GHND   0
 
-inline int8_t * GlobalAllocPtr(unsigned int, size_t size)
+static inline int8_t * GlobalAllocPtr(unsigned int, size_t size)
 {
   int8_t * p = (int8_t *) malloc(size);
 
@@ -120,7 +120,7 @@
   return p;
 }
 
-inline void ProcessPlugins(int n) {}
+static inline void ProcessPlugins(int n) {}
 
 #define GlobalFreePtr(p) free((void *)(p))
 
diff -Nudr -U3 -x .svn libmodplug.pristine/src/load_amf.cpp libmodplug/src/load_amf.cpp
--- libmodplug.pristine/src/load_amf.cpp	2009-12-31 16:33:36.000000000 +0000
+++ libmodplug/src/load_amf.cpp	2009-12-31 16:59:37.000000000 +0000
@@ -52,7 +52,7 @@
 extern void Log(LPCSTR, ...);
 #endif
 
-VOID AMF_Unpack(MODCOMMAND *pPat, const BYTE *pTrack, UINT nRows, UINT nChannels)
+static VOID AMF_Unpack(MODCOMMAND *pPat, const BYTE *pTrack, UINT nRows, UINT nChannels)
 //-------------------------------------------------------------------------------
 {
 	UINT lastinstr = 0;
diff -Nudr -U3 -x .svn libmodplug.pristine/src/load_it.cpp libmodplug/src/load_it.cpp
--- libmodplug.pristine/src/load_it.cpp	2009-12-31 16:33:36.000000000 +0000
+++ libmodplug/src/load_it.cpp	2009-12-31 17:07:19.000000000 +0000
@@ -15,11 +15,13 @@
 #pragma warning(disable:4244)
 #endif
 
-BYTE autovibit2xm[8] =
+static BYTE autovibit2xm[8] =
 { 0, 3, 1, 4, 2, 0, 0, 0 };
 
-BYTE autovibxm2it[8] =
+#ifndef MODPLUG_NO_FILESAVE
+static BYTE autovibxm2it[8] =
 { 0, 2, 4, 1, 3, 0, 0, 0 };
+#endif
 
 //////////////////////////////////////////////////////////
 // Impulse Tracker IT file support
@@ -1180,7 +1182,7 @@
 //////////////////////////////////////////////////////////////////////////////
 // IT 2.14 compression
 
-DWORD ITReadBits(DWORD &bitbuf, UINT &bitnum, LPBYTE &ibuf, CHAR n)
+static DWORD ITReadBits(DWORD &bitbuf, UINT &bitnum, LPBYTE &ibuf, CHAR n)
 //-----------------------------------------------------------------
 {
 	DWORD retval = 0;
diff -Nudr -U3 -x .svn libmodplug.pristine/src/load_mod.cpp libmodplug/src/load_mod.cpp
--- libmodplug.pristine/src/load_mod.cpp	2009-12-31 16:33:36.000000000 +0000
+++ libmodplug/src/load_mod.cpp	2009-12-31 17:07:57.000000000 +0000
@@ -168,7 +168,7 @@
 
 #pragma pack()
 
-BOOL IsMagic(LPCSTR s1, LPCSTR s2)
+static BOOL IsMagic(LPCSTR s1, LPCSTR s2)
 {
 	return ((*(DWORD *)s1) == (*(DWORD *)s2)) ? TRUE : FALSE;
 }
diff -Nudr -U3 -x .svn libmodplug.pristine/src/mmcmp.cpp libmodplug/src/mmcmp.cpp
--- libmodplug.pristine/src/mmcmp.cpp	2009-12-31 16:28:57.000000000 +0000
+++ libmodplug/src/mmcmp.cpp	2009-12-31 17:00:55.000000000 +0000
@@ -7,7 +7,7 @@
 #include "stdafx.h"
 #include "sndfile.h"
 
-BOOL PP20_Unpack(LPCBYTE *ppMemFile, LPDWORD pdwMemLength);
+static BOOL PP20_Unpack(LPCBYTE *ppMemFile, LPDWORD pdwMemLength);
 
 typedef struct MMCMPFILEHEADER
 {
@@ -325,7 +325,7 @@
 }
 
 
-VOID PP20_DoUnpack(const BYTE *pSrc, UINT nSrcLen, BYTE *pDst, UINT nDstLen)
+static VOID PP20_DoUnpack(const BYTE *pSrc, UINT nSrcLen, BYTE *pDst, UINT nDstLen)
 {
 	PPBITBUFFER BitBuffer;
 	ULONG nBytesLeft;
@@ -380,7 +380,7 @@
 }
 
 
-BOOL PP20_Unpack(LPCBYTE *ppMemFile, LPDWORD pdwMemLength)
+static BOOL PP20_Unpack(LPCBYTE *ppMemFile, LPDWORD pdwMemLength)
 {
 	DWORD dwMemLength = *pdwMemLength;
 	LPCBYTE lpMemFile = *ppMemFile;
diff -Nudr -U3 -x .svn libmodplug.pristine/src/modplug.cpp libmodplug/src/modplug.cpp
--- libmodplug.pristine/src/modplug.cpp	2006-03-20 03:39:33.000000000 +0000
+++ libmodplug/src/modplug.cpp	2009-12-31 17:12:43.000000000 +0000
@@ -15,7 +15,7 @@
 
 namespace ModPlug
 {
-	ModPlug_Settings gSettings =
+	static ModPlug_Settings gSettings =
 	{
 		MODPLUG_ENABLE_OVERSAMPLING | MODPLUG_ENABLE_NOISE_REDUCTION,
 
@@ -33,9 +33,9 @@
 		0
 	};
 
-	int gSampleSize;
+	static int gSampleSize;
 
-	void UpdateSettings(bool updateBasicConfig)
+	static void UpdateSettings(bool updateBasicConfig)
 	{
 		if(gSettings.mFlags & MODPLUG_ENABLE_REVERB)
 		{
@@ -104,6 +104,8 @@
 	return file->mSoundFile.Read(buffer, size) * ModPlug::gSampleSize;
 }
 
+#ifdef MODPLUG_DEADCODE
+
 const char* ModPlug_GetName(ModPlugFile* file)
 {
 	return file->mSoundFile.GetTitle();
@@ -264,6 +266,8 @@
 	memcpy(settings, &ModPlug::gSettings, sizeof(ModPlug_Settings));
 }
 
+#endif // MODPLUG_DEADCODE
+
 void ModPlug_SetSettings(const ModPlug_Settings* settings)
 {
 	memcpy(&ModPlug::gSettings, settings, sizeof(ModPlug_Settings));
diff -Nudr -U3 -x .svn libmodplug.pristine/src/modplug.h libmodplug/src/modplug.h
--- libmodplug.pristine/src/modplug.h	2006-03-20 03:39:34.000000000 +0000
+++ libmodplug/src/modplug.h	2009-12-31 17:17:44.000000000 +0000
@@ -37,22 +37,6 @@
  * of the mod has been reached, zero is returned. */
 int  ModPlug_Read(ModPlugFile* file, void* buffer, int size);
 
-/* Get the name of the mod.  The returned buffer is stored within the ModPlugFile
- * structure and will remain valid until you unload the file. */
-const char* ModPlug_GetName(ModPlugFile* file);
-
-/* Get the length of the mod, in milliseconds.  Note that this result is not always
- * accurate, especially in the case of mods with loops. */
-int ModPlug_GetLength(ModPlugFile* file);
-
-/* Seek to a particular position in the song.  Note that seeking and MODs don't mix very
- * well.  Some mods will be missing instruments for a short time after a seek, as ModPlug
- * does not scan the sequence backwards to find out which instruments were supposed to be
- * playing at that time.  (Doing so would be difficult and not very reliable.)  Also,
- * note that seeking is not very exact in some mods -- especially those for which
- * ModPlug_GetLength() does not report the full length. */
-void ModPlug_Seek(ModPlugFile* file, int millisecond);
-
 enum _ModPlug_Flags
 {
 	MODPLUG_ENABLE_OVERSAMPLING     = 1 << 0,  /* Enable oversampling (*highly* recommended) */
@@ -91,11 +75,30 @@
 	                        -1 loops forever. */
 } ModPlug_Settings;
 
+void ModPlug_SetSettings(const ModPlug_Settings* settings);
+
+#ifdef MODPLUG_DEADCODE
+
+/* Get the name of the mod.  The returned buffer is stored within the ModPlugFile
+ * structure and will remain valid until you unload the file. */
+const char* ModPlug_GetName(ModPlugFile* file);
+
+/* Get the length of the mod, in milliseconds.  Note that this result is not always
+ * accurate, especially in the case of mods with loops. */
+int ModPlug_GetLength(ModPlugFile* file);
+
+/* Seek to a particular position in the song.  Note that seeking and MODs don't mix very
+ * well.  Some mods will be missing instruments for a short time after a seek, as ModPlug
+ * does not scan the sequence backwards to find out which instruments were supposed to be
+ * playing at that time.  (Doing so would be difficult and not very reliable.)  Also,
+ * note that seeking is not very exact in some mods -- especially those for which
+ * ModPlug_GetLength() does not report the full length. */
+void ModPlug_Seek(ModPlugFile* file, int millisecond);
+
 /* Get and set the mod decoder settings.  All options, except for channels, bits-per-sample,
  * sampling rate, and loop count, will take effect immediately.  Those options which don't
  * take effect immediately will take effect the next time you load a mod. */
 void ModPlug_GetSettings(ModPlug_Settings* settings);
-void ModPlug_SetSettings(const ModPlug_Settings* settings);
 
 /* New ModPlug API Functions */
 /* NOTE: Master Volume (1-512) */
@@ -161,6 +164,8 @@
 void ModPlug_InitMixerCallback(ModPlugFile* file,ModPlugMixerProc proc) ;
 void ModPlug_UnloadMixerCallback(ModPlugFile* file) ;
 
+#endif // MODPLUG_DEADCODE
+
 #ifdef __cplusplus
 } /* extern "C" */
 #endif
