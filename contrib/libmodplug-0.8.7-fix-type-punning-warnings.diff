Index: libmodplug/src/load_669.cpp
===================================================================
--- libmodplug/src/load_669.cpp	(revision 1571)
+++ libmodplug/src/load_669.cpp	(working copy)
@@ -53,8 +53,9 @@
 	if (dontfuckwithme > dwMemLength) return FALSE;
 	for (UINT ichk=0; ichk<pfh->samples; ichk++)
 	{
-		DWORD len = bswapLE32(*((DWORD *)(&psmp[ichk].length)));
-		dontfuckwithme += len;
+		DWORD tmp;
+		memcpy(&tmp, &psmp[ichk].length, sizeof(DWORD));
+		dontfuckwithme += bswapLE32(tmp);
 	}
 	if (dontfuckwithme > dwMemLength) return FALSE;
 	// That should be enough checking: this must be a 669 module.
@@ -69,9 +70,15 @@
 	m_nSamples = pfh->samples;
 	for (UINT nins=1; nins<=m_nSamples; nins++, psmp++)
 	{
-		DWORD len = bswapLE32(*((DWORD *)(&psmp->length)));
-		DWORD loopstart = bswapLE32(*((DWORD *)(&psmp->loopstart)));
-		DWORD loopend = bswapLE32(*((DWORD *)(&psmp->loopend)));
+		DWORD tmp, len, loopstart, loopend;
+
+		memcpy(&tmp, &psmp->length, sizeof(DWORD));
+		len = bswapLE32(tmp);
+		memcpy(&tmp, &psmp->loopstart, sizeof(DWORD));
+		loopstart = bswapLE32(tmp);
+		memcpy(&tmp, &psmp->loopend, sizeof(DWORD));
+		loopend = bswapLE32(tmp);
+
 		if (len > MAX_SAMPLE_LENGTH) len = MAX_SAMPLE_LENGTH;
 		if ((loopend > len) && (!loopstart)) loopend = 0;
 		if (loopend > len) loopend = len;
Index: libmodplug/src/sndfile.cpp
===================================================================
--- libmodplug/src/sndfile.cpp	(revision 1571)
+++ libmodplug/src/sndfile.cpp	(working copy)
@@ -930,12 +930,12 @@
 				if (nFlags == RS_PCM16D)
 				{
 					int16_t temp = bswapLE16((int16_t)(s_new - s_old));
-					*((int16_t*)(&buffer[bufcount])) = temp;
+					memcpy(&buffer[bufcount], &temp, sizeof(int16_t));
 					s_old = s_new;
 				} else
 				{
 					int16_t temp = bswapLE16((int16_t)(s_new + s_ofs));
-					*((int16_t *)(&buffer[bufcount])) = temp;
+					memcpy(&buffer[bufcount], &temp, sizeof(int16_t));
 				}
 				bufcount += 2;
 				if (bufcount >= sizeof(buffer) - 1)
@@ -1004,12 +1004,12 @@
 					if (nFlags == RS_STPCM16D)
 					{
 						int16_t temp = bswapLE16((int16_t)(s_new - s_old));
-						*((int16_t *)(&buffer[bufcount])) = temp;
+						memcpy(&buffer[bufcount], &temp, sizeof(int16_t));
 						s_old = s_new;
 					} else
 					{
 						int16_t temp = bswapLE16((int16_t)(s_new - s_ofs));
-						*((int16_t*)(&buffer[bufcount])) = temp;
+						memcpy(&buffer[bufcount], &temp, sizeof(int16_t));
 					}
 					bufcount += 2;
 					if (bufcount >= sizeof(buffer))
