##
# MegaZeux Makefile fragment
##

include contrib/gdm2s3m/src/Makefile.in
include contrib/libmodplug/src/Makefile.in
include contrib/unzip/src/Makefile.in

.PHONY: ${mzx}_clean ${txt2hlp}_clean ${checkres}_clean

mzx_base     = src
mzx_flags   += -W -Wno-unused-parameter -ffast-math -funsigned-char
mzx_flags   += -Wmissing-format-attribute -Wpointer-arith
mzx_flags   += -Wwrite-strings
mzx_cflags  += -Wmissing-prototypes
mzx_cxxflags = -DHAVE_INTTYPES_H

mzx_flags   += ${SDL_CFLAGS} -I${mzx_base} -I${PREFIX}/include
mzx_ldflags := ${SDL_LDFLAGS} ${mzx_ldflags} ${ARCH_LDFLAGS}

utils_base = src/utils

txt2hlp = ${utils_base}/txt2hlp${BINEXT}
txt2hlp_objs = ${utils_base}/txt2hlp.${o}

checkres = ${utils_base}/checkres${BINEXT}
checkres_objs := ${utils_base}/checkres.${o}
checkres_objs += ${mzx_base}/fsafeopen.${o} ${mzx_base}/util.${o}
checkres_ldflags = ${unzip} -L${PREFIX}/lib -lz

${utils_base}/%.o ${utils_base}/%.dbg.o: ${utils_base}/%.c
ifeq (${V},1)
	${CC} -MD ${CFLAGS} -I${mzx_base} -I${unzip_base} \
	                    -I${PREFIX}/include -c $< -o $@
else
	@echo "  CC      " $<
	@${CC} -MD ${CFLAGS} -I${mzx_base} -I${unzip_base} \
	                     -I${PREFIX}/include -c $< -o $@
endif

${mzx_base}/%.o ${mzx_base}/%.dbg.o: ${mzx_base}/%.c
ifeq (${V},1)
	${CC} -MD ${CFLAGS} ${mzx_flags} ${mzx_cflags} -c $< -o $@
else
	@echo "  CC      " $<
	@${CC} -MD ${CFLAGS} ${mzx_flags} ${mzx_cflags} -c $< -o $@
endif

${mzx_base}/%.o ${mzx_base}/%.dbg.o: ${mzx_base}/%.cpp
ifeq (${V},1)
	${CXX} -MD ${CXXFLAGS} ${mzx_flags} ${mzx_cxxflags} -c $< -o $@
else
	@echo "  CXX     " $<
	@${CXX} -MD ${CXXFLAGS} ${mzx_flags} ${mzx_cxxflags} -c $< -o $@
endif

# please keep this sorted alphabetically (yes, I know it's painful)
mzx_objs := ${mzx_base}/board.${o} ${mzx_base}/configure.${o}
mzx_objs += ${mzx_base}/counter.${o} ${mzx_base}/data.${o}
mzx_objs += ${mzx_base}/decrypt.${o} ${mzx_base}/error.${o}
mzx_objs += ${mzx_base}/event.${o} ${mzx_base}/expr.${o}
mzx_objs += ${mzx_base}/fsafeopen.${o} ${mzx_base}/game2.${o}
mzx_objs += ${mzx_base}/game.${o} ${mzx_base}/graphics.${o}
mzx_objs += ${mzx_base}/idarray.${o} ${mzx_base}/idput.${o}
mzx_objs += ${mzx_base}/intake.${o} ${mzx_base}/macro.${o}
mzx_objs += ${mzx_base}/main.${o} ${mzx_base}/mzm.${o}
mzx_objs += ${mzx_base}/rasm.${o} ${mzx_base}/render.${o}
mzx_objs += ${mzx_base}/robot.${o} ${mzx_base}/runrobo2.${o}
mzx_objs += ${mzx_base}/scrdisp.${o} ${mzx_base}/sfx.${o}
mzx_objs += ${mzx_base}/sprite.${o} ${mzx_base}/util.${o}
mzx_objs += ${mzx_base}/window.${o} ${mzx_base}/world.${o}

ifneq (${BUILD_NDS},1)
ifneq (${BUILD_PSP},1)
#
# Hack to avoid silly warnings from devkitPro headers
#
mzx_cflags += -Wstrict-prototypes
mzx_flags += -Wcast-align
endif
endif

ifeq (${BUILD_NDS},1)
#
# This is really just a hack and should be moved elsewhere
#
mzx_objs += arch/nds/ram.${o} arch/nds/exception.${o}
mzx_objs += arch/nds/malloc.${o} arch/nds/extmem.${o}
endif

ifeq (${BUILD_EDITOR},1)
mzx_objs += ${mzx_base}/block.${o} ${mzx_base}/char_ed.${o}
mzx_objs += ${mzx_base}/edit.${o} ${mzx_base}/edit_di.${o}
mzx_objs += ${mzx_base}/fill.${o} ${mzx_base}/pal_ed.${o}
mzx_objs += ${mzx_base}/param.${o} ${mzx_base}/robo_ed.${o}
mzx_objs += ${mzx_base}/sfx_edit.${o}
endif

ifeq (${BUILD_HELPSYS},1)
mzx_objs += ${mzx_base}/helpsys.${o}
endif

ifeq (${BUILD_RENDER_SOFT},1)
mzx_objs += ${mzx_base}/render_soft.${o}
endif

ifeq (${BUILD_RENDER_GL},1)
mzx_objs += ${mzx_base}/render_gl.${o}
mzx_objs += ${mzx_base}/render_gl1.${o} ${mzx_base}/render_gl2.${o}
endif

ifeq (${BUILD_RENDER_YUV},1)
mzx_objs += ${mzx_base}/render_yuv.${o}
mzx_objs += ${mzx_base}/render_yuv1.${o} ${mzx_base}/render_yuv2.${o}
endif

ifeq (${BUILD_RENDER_GP2X},1)
mzx_objs += ${mzx_base}/render_gp2x.${o}
endif

ifeq (${BUILD_NDS},1)
mzx_objs += ${mzx_base}/render_nds.${o}
endif

ifeq (${BUILD_MODPLUG},1)
mzx_flags += -I${gdm2s3m_base}
mzx_flags += -I${libmodplug_base} -I${libmodplug_base}/libmodplug
mzx_ldflags := ${gdm2s3m} ${libmodplug} -lstdc++ ${mzx_ldflags}
mzx_objs += ${mzx_base}/audio_modplug.${o}
endif

ifeq (${BUILD_MIKMOD},1)
mzx_ldflags := -L${PREFIX} -lmikmod ${mzx_ldflags}
mzx_objs += ${mzx_base}/audio_mikmod.${o}
endif

ifeq (${LIBPNG},1)
mzx_flags += ${LIBPNG_CFLAGS}
mzx_ldflags := ${LIBPNG_LDFLAGS} ${mzx_ldflags}
endif

ifeq (${BUILD_AUDIO},1)
mzx_objs += ${mzx_base}/audio.${o}
mzx_flags += ${VORBIS_CFLAGS}
mzx_ldflags := ${VORBIS_LDFLAGS} ${mzx_ldflags}
endif

ifeq (${PTHREAD},1)
mzx_ldflags := -lpthread ${mzx_ldflags}
endif

-include $(mzx_objs:.o=.d)
-include $(txt2hlp_objs:.o=.d)
-include $(checkres_objs:.o=.d)

ifeq (${BUILD_UTILS},1)

${txt2hlp}: ${txt2hlp_objs}
ifeq (${V},1)
	${HOST_CC} ${txt2hlp_objs} -o ${txt2hlp}
else
	@echo "  LINK    " ${txt2hlp}
	@${HOST_CC} ${txt2hlp_objs} -o ${txt2hlp}
endif
ifneq (${DEBUG},1)
ifeq (${V},1)
	${STRIP} ${txt2hlp}
else
	@echo "  STRIP   " ${txt2hlp}
	@${STRIP} ${txt2hlp}
endif
endif

${checkres}: ${checkres_objs}
ifeq (${V},1)
	${HOST_CC} ${checkres_objs} -o ${checkres} ${checkres_ldflags}
else
	@echo "  LINK    " ${checkres}
	@${HOST_CC} ${checkres_objs} -o ${checkres} ${checkres_ldflags}
endif
ifneq (${DEBUG},1)
ifeq (${V},1)
	${STRIP} ${checkres}
else
	@echo "  STRIP   " ${checkres}
	@${STRIP} ${checkres}
endif
endif

else

${checkres}:
	@echo "--> Building of checkres disabled."
${txt2hlp}:
	@echo "--> Building of txt2hlp disabled."

endif

${mzx}: ${gdm2s3m} ${libmodplug} ${unzip} ${mzx_objs}
ifeq (${V},1)
	${CC} ${mzx_objs} -o ${mzx} ${mzx_ldflags}
else
	@echo "  LINK    " ${mzx}
	@${CC} ${mzx_objs} -o ${mzx} ${mzx_ldflags}
endif
ifneq (${DEBUG},1)
ifeq (${V},1)
	${STRIP} ${mzx}
else
	@echo "  STRIP   " ${mzx}
	@${STRIP} ${mzx}
endif
endif

utils: ${txt2hlp} ${checkres}
utils_clean: ${txt2hlp}_clean ${checkres}_clean

${txt2hlp}_clean:
	@echo "  CLEAN   " ${txt2hlp}
	@rm -f ${txt2hlp_objs} ${txt2hlp} $(txt2hlp_objs:.o=.d)

${checkres}_clean:
	@echo "  CLEAN   " ${checkres}
	@rm -f ${checkres_objs} ${checkres} $(checkres_objs:.o=.d)

${mzx}_clean:
	@echo "  CLEAN   " ${mzx_base}
	@rm -f ${mzx_objs} ${mzx} $(mzx_objs:.o=.d)
