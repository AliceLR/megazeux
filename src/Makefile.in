##
# MegaZeux Makefile fragment
##

include contrib/gdm2s3m/src/Makefile.in
include contrib/icons/Makefile.in
include contrib/libmodplug/src/Makefile.in

.PHONY: ${mzx}_clean

LINK_CC := ${CC}

mzx_base     = src
editor_base  = src/editor
mzx_flags   += -W -Wno-unused-parameter -ffast-math -funsigned-char
mzx_flags   += -Wmissing-format-attribute -Wpointer-arith
mzx_flags   += -Wwrite-strings
mzx_cflags  += -Wmissing-prototypes
mzx_cxxflags = -DHAVE_INTTYPES_H

mzx_flags   += -I${mzx_base} -I${PREFIX}/include
mzx_ldflags := ${mzx_ldflags} ${ARCH_LDFLAGS}

${editor_base}/%.${o} : ${editor_base}/%.c
${mzx_base}/%.${o}: ${mzx_base}/%.c
ifeq (${V},1)
	${CC} -MD ${CFLAGS} ${mzx_flags} ${mzx_cflags} -c $< -o $@
else
	@echo "  CC      " $<
	@${CC} -MD ${CFLAGS} ${mzx_flags} ${mzx_cflags} -c $< -o $@
endif

${mzx_base}/%.${o}: ${mzx_base}/%.cpp
ifeq (${V},1)
	${CXX} -MD ${CXXFLAGS} ${mzx_flags} ${mzx_cxxflags} -c $< -o $@
else
	@echo "  CXX     " $<
	@${CXX} -MD ${CXXFLAGS} ${mzx_flags} ${mzx_cxxflags} -c $< -o $@
endif

#
# Lists mandatory C language sources (mangled to object names) required
# to build the main binary. Please keep this sorted alphabetically.
#
mzx_cobjs := ${mzx_base}/board.${o} ${mzx_base}/configure.${o}
mzx_cobjs += ${mzx_base}/counter.${o} ${mzx_base}/data.${o}
mzx_cobjs += ${mzx_base}/decrypt.${o} ${mzx_base}/error.${o}
mzx_cobjs += ${mzx_base}/event.${o} ${mzx_base}/expr.${o}
mzx_cobjs += ${mzx_base}/fsafeopen.${o} ${mzx_base}/game2.${o}
mzx_cobjs += ${mzx_base}/game.${o} ${mzx_base}/graphics.${o}
mzx_cobjs += ${mzx_base}/idarray.${o} ${mzx_base}/idput.${o}
mzx_cobjs += ${mzx_base}/intake.${o} ${mzx_base}/main.${o}
mzx_cobjs += ${mzx_base}/mzm.${o} ${mzx_base}/rasm.${o}
mzx_cobjs += ${mzx_base}/render.${o} ${mzx_base}/robot.${o}
mzx_cobjs += ${mzx_base}/runrobo2.${o} ${mzx_base}/scrdisp.${o}
mzx_cobjs += ${mzx_base}/sfx.${o} ${mzx_base}/sprite.${o}
mzx_cobjs += ${mzx_base}/util.${o} ${mzx_base}/window.${o}
mzx_cobjs += ${mzx_base}/world.${o}

#
# Lists mandatory C++ language sources (mangled to object names) required
# to build the main binary. Currently there are only optional sources.
#
mzx_cxxobjs :=

ifneq (${BUILD_WII},1)
ifneq (${BUILD_NDS},1)
ifneq (${BUILD_PSP},1)
#
# Hack to avoid silly warnings from devkitPro headers
#
mzx_cflags += -Wstrict-prototypes
endif
endif
endif

ifeq (${BUILD_NDS},1)
#
# This is really just a hack and should be moved elsewhere
#
mzx_cobjs += arch/nds/ram.${o} arch/nds/exception.${o}
mzx_cobjs += arch/nds/malloc.${o} arch/nds/extmem.${o}
endif

ifeq (${BUILD_EDITOR},1)
mzx_cobjs += ${editor_base}/board.${o} ${editor_base}/block.${o}
mzx_cobjs += ${editor_base}/char_ed.${o} ${editor_base}/debug.${o}
mzx_cobjs += ${editor_base}/edit.${o} ${editor_base}/edit_di.${o}
mzx_cobjs += ${editor_base}/fill.${o} ${editor_base}/graphics.${o}
mzx_cobjs += ${editor_base}/macro.${o} ${editor_base}/pal_ed.${o}
mzx_cobjs += ${editor_base}/param.${o} ${editor_base}/robo_ed.${o}
mzx_cobjs += ${editor_base}/robot.${o} ${editor_base}/sfx_edit.${o}
mzx_cobjs += ${editor_base}/window.${o} ${editor_base}/world.${o}
endif

ifeq (${BUILD_HELPSYS},1)
mzx_cobjs += ${mzx_base}/helpsys.${o}
endif

ifeq (${BUILD_RENDER_SOFT},1)
mzx_cobjs += ${mzx_base}/render_soft.${o}
endif

ifeq (${BUILD_RENDER_GL},1)
mzx_cobjs += ${mzx_base}/render_gl.${o}
mzx_cobjs += ${mzx_base}/render_gl1.${o} ${mzx_base}/render_gl2.${o}
endif

ifeq (${BUILD_RENDER_YUV},1)
mzx_cobjs += ${mzx_base}/render_yuv.${o}
mzx_cobjs += ${mzx_base}/render_yuv1.${o} ${mzx_base}/render_yuv2.${o}
endif

ifeq (${BUILD_RENDER_GP2X},1)
mzx_cobjs += ${mzx_base}/render_gp2x.${o}
endif

ifeq (${BUILD_RENDER_GX},1)
mzx_cobjs += ${mzx_base}/render_gx.${o}
endif

ifeq (${BUILD_NDS},1)
mzx_cobjs += ${mzx_base}/render_nds.${o}
endif

ifeq (${EMBED_ICONS},1)
mzx_ldflags := ${icons} ${mzx_ldflags}
${mzx}: ${icons}
endif

ifeq (${BUILD_MODPLUG},1)
mzx_cflags += -I${gdm2s3m_base}
mzx_cobjs += ${gdm2s3m_objs}
mzx_flags += -I${libmodplug_base} -I${libmodplug_base}/libmodplug
mzx_cxxobjs += ${mzx_base}/audio_modplug.${o} ${libmodplug_objs}
LINK_CC := ${CXX}
endif

ifeq (${BUILD_MIKMOD},1)
mzx_ldflags := ${MIKMOD_LDFLAGS} ${mzx_ldflags}
mzx_cobjs += ${mzx_base}/audio_mikmod.${o}
endif

ifeq (${LIBPNG},1)
mzx_flags += ${LIBPNG_CFLAGS}
mzx_ldflags := ${LIBPNG_LDFLAGS} ${mzx_ldflags}
mzx_cobjs += ${mzx_base}/pngops.${o}
endif

ifeq (${BUILD_AUDIO},1)
mzx_cobjs += ${mzx_base}/audio.${o}
mzx_flags += ${VORBIS_CFLAGS}
mzx_ldflags := ${VORBIS_LDFLAGS} ${mzx_ldflags}
endif

ifeq (${PTHREAD},1)
mzx_ldflags := -lpthread ${mzx_ldflags}
endif

ifeq (${BUILD_SDL},1)

mzx_cobjs += ${mzx_base}/event_sdl.${o} ${mzx_base}/platform_sdl.${o}
mzx_cobjs += ${mzx_base}/render_sdl.${o}

ifeq (${BUILD_AUDIO},1)
mzx_cobjs += ${mzx_base}/audio_sdl.${o}
endif

mzx_flags += ${SDL_CFLAGS}
mzx_ldflags += ${SDL_LDFLAGS}

endif

ifeq (${BUILD_WII},1)
mzx_cobjs += ${mzx_base}/event_wii.${o} ${mzx_base}/platform_wii.${o}
ifeq (${BUILD_AUDIO},1)
mzx_cobjs += ${mzx_base}/audio_wii.${o}
endif
endif

-include ${mzx_cobjs:.o=.d}
-include ${mzx_cxxobjs:.o=.d}

ifeq (${WHOLE_PROGRAM},1)

#
# If we're doing -fwhole-program optimizations, don't go through the source
# files individually. Instead, compile all of the C source at once, but
# continue to compile C++ source separately. Force the cobjs link line, and
# link the combined C object with the C++ code. Hacky, but fairly maintainable.
#

mzx_cobjs_link := src/c.o

#
# Shouldn't really be phony but it's hard to get the dependencies right, and
# this build option should only be used for "release" builds where deps aren't
# very useful. Therefore, always rebuild c.o whenever the ${mzx} target is
# invoked.
#
.PHONY: src/c.o

src/c.o:
ifeq (${V},1)
	${CC} ${CFLAGS} ${mzx_flags} ${mzx_cflags} \
	      -fwhole-program --combine -c ${mzx_cobjs:.${o}=.c} -o src/c.o
else
	@echo "  --> Compiling all C files with --combine -fwhole-program..."
	@${CC} ${CFLAGS} ${mzx_flags} ${mzx_cflags} \
	      -fwhole-program --combine -c ${mzx_cobjs:.${o}=.c} -o src/c.o
endif

${mzx}: ${mzx_cxxobjs} src/c.o

else

#
# Regular compile mode -- the link objects are the sources, individually, and
# we link as normal.
#

mzx_cobjs_link := ${mzx_cobjs}

${mzx}: ${mzx_cobjs} ${mzx_cxxobjs}

endif

${mzx}: ${mzx_cobjs_link} ${mzx_cxxobjs}
ifeq (${V},1)
	${LINK_CC} ${mzx_cobjs_link} ${mzx_cxxobjs} \
	        -o ${mzx} ${LDFLAGS} ${mzx_ldflags}
else
	@echo "  LINK    " ${mzx}
	@${LINK_CC} ${mzx_cobjs_link} ${mzx_cxxobjs} \
	         -o ${mzx} ${LDFLAGS} ${mzx_ldflags}
endif
ifneq (${DEBUG},1)
ifeq (${V},1)
	${STRIP} ${mzx}
else
	@echo "  STRIP   " ${mzx}
	@${STRIP} ${mzx}
endif
endif

${mzx}_clean: gdm2s3m_clean ${icons}_clean libmodplug_clean
	@echo "  CLEAN   " ${mzx_base}
	@rm -f ${mzx} src/c.o ${mzx_cobjs} ${mzx_cobjs:.o=.d}
	@rm -f ${mzx_cxxobjs} ${mzx_cxxobjs:.o=.d}
