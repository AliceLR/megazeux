Multiplayer support

This version of MegaZeux may have limited support for native multiplayer. If you used default settings to build this then it does not have this support. If you used --enable-multiplayer then it probably has this support.

----------------------------------------------------------------------------

How it works

Here's the basics:

- You have N players, where N is at least 1, although for this to actually be multiplayer, this would have to be at least 2.
- Players are numbered from 0 onwards because numbering from 0 consistently is going to be less of a pain than numbering from 1 consistently, or doing a mixture of the two.
- The first player is the primary player, which will always be player 0.
- The other N-1 players are secondary players.
- The parameter of a player object indicates which player this is. Player 0 is, of course, p00, which is what hopefully all player objects will have as their parameter.

Now, if player 0 is the only player doing any moving then players 1 through 255 do not appear and this plays exactly like a single-player game, assuming the game is multiplayer-unaware of course.

However, once the other players start to move, we get to cover the concepts of separation and merging:

- A player can be "merged", "separated", xor "player 0".
- All players start out as "merged" - that is, they share player 0's position and are effectively not there at all. Think of player 0 as a clown car.
- A merged player, if it successfully can move from player 0's position, creates a new player object on the board with the parameter being equal to that player's player ID, and the player is now "separated".
- Certain actions will merge all players with player 0, these are:
  - Moving to a different board
  - Dying where "restart on board" is set
  - Teleporting to a specific position (TODO: Ensure that this is the case)
  - Some actions which are undesireable, but require further code to make these not cause a full merge:
    - Doing a "die item"

----------------------------------------------------------------------------

Goals

The initial goal is to be able to play the original MegaZeux quartet mostly coherently:

- If a player clone forms under ANY circumstances, this is a bug that MUST get squished.
- If you can cause sequence breaks and/or softlocks by being several players, this is completely fine. These games do have softlocks in them anyway, and they're less of a softlock and more of a soft-game-over.
- The side-scrolling sections in Catacombs are probably best left to the primary player to play them.

The next goal is to allow game creators to make multiplayer-aware games that can be non-coop games.

TODO: put some notes here.

Everything after that is more like a stretch goal. This includes:

- Split-screen viewport handling
- Networked multiplayer

----------------------------------------------------------------------------

[UNIMPLEMENTED] Input handling

This one's going to be hard to get right.

? Should each player be presented as a virtual joystick?
  - The joystick code could do with less pain, not more.
? Should each player be presented as its own keyboard? mouse? both?
? Do we separate (up|down|left|right|space|del)pressed from their respective keys and then have some way to map these to the respective players?
  + This is probably going to have to happen regardless.
? Do we have extra virtual keys for (up|down|left|right|space|del)?
  ? Do we also have an extra one for insert, or do we all share that button, or do we leave that to player 0?

----------------------------------------------------------------------------

[UNIMPLEMENTED] Counters

Some ideas:

TODO. There's definitely ideas to go into here, but this text file has a lot of others I need to get off my chest. --GM

----------------------------------------------------------------------------

[UNIMPLEMENTED] Viewports and split screen

Some ideas for multiplayer-unaware games:

- If the camera is locked, we use a single viewport and the camera's position.
- Otherwise, if any players are far enough apart we split the screen as needed.
- Ideally we'd exercise some intelligence based on where the players are when splitting the viewport.
- Or alternatively we could keep the viewport split if the board isn't large enough relative to the viewport size to warrant it, or maybe just keep it split regardless of the board size.
- I have a proof of concept for split screen in my first attempt at multiplayer. Since then there were a lot of overhauls applied to the mainline code and I've basically had to redo this from the ground up. Therefore, this is my second attempt. --GM

Some ideas for multiplayer-aware games:

- It should be possible to limit sprite visibility on a per-player basis.
  - Alternatively, providing a "per player index x/y offset" would mean that we don't spam the sprite list.
  - But if we do that, I'd be inclined to cap it to a min/max player range.
- Per-viewport control as well as size awareness should be a possibility.
  - For sprites, would it be worth coming up with a way to anchor them based on left/right, top/bottom corners for both the viewport and the sprite itself?
    - If yes, would it be worth having these separately controllable?
    - Also, what about allowing centres for both axes, too?
    - All of this combined would also open the floor to having >80x25 viewports working nicely...

- Due to the added complexity and the amount of thinking ahead required, I'd be tempted to allow a game to enforce a player count limit, possibly even a players-per-client limit.

----------------------------------------------------------------------------

[UNIMPLEMENTED] Networked multiplayer

The main idea for this is as follows:

- For a game, there exists one server and any number of clients.
  - The server dictates the game frame state.
  - The server and the clients run all the game logic.
  - The primary player is the authority as to what gets loaded and what gets inputted and whatnot.
  - A client or a server can have any number of players.
- We start with a save file which all clients must load.
- All clients provide their inputs to the server.
- The server dictates the inputs for every frame.
- All nodes operate in lockstep.

If we make it possible to dump the network logs to a file and then play them back, we also get a demo format For Free(tm).

----------------------------------------------------------------------------

TODO:

- Per-player inputs.
- Expose multiplayer counters.
- Actual networked multiplayer support. config.sh will leave the networking code intact here if multiplayer is enabled, but it will not be used at this stage.

