#
# OS X makefile generics
#

DSOLDFLAGS = -dynamiclib
DSOPRE     = lib
DSOPOST    = .dylib
DSORPATH   =
DSOSONAME  = -install_name ${LIBDIR}/

LIPO       ?= @arch/darwin/lipo.sh

#
# darwin specific recipes.
# Enable 'make install' and 'make uninstall' for darwin builds.
#

ifeq (${SUBPLATFORM},darwin)

include arch/install.inc

# No platform-specific files to install
install-arch:
uninstall-arch:

endif

#
# darwin-dist specific recipes.
# These recipes are intended to produce portable Mac OS X .apps.
# This setup is extremely old and for Intel Macs has been superceded
# by the Xcode project folder (see: arch/xcode). However, this is still
# required to build PowerPC Mac .apps.
#

ifeq (${SUBPLATFORM},darwin-dist)

.PHONY: dist lipo package package_clean

# Make dylib path the same as the executable path instead
DSOSONAME  = -install_name @executable_path/

# Override these to determine which builds are included in the .app.
PREFIX_I686   ?=
PREFIX_AMD64  ?=
PREFIX_AMD64H ?=
PREFIX_PPC    ?=
PREFIX_PPC64  ?=
PREFIX_ARM64  ?=
PREFIX_ARM64E ?=

HAS_PREFIX=1
ifeq (${PREFIX_I686},)
ifeq (${PREFIX_AMD64},)
ifeq (${PREFIX_AMD64H},)
ifeq (${PREFIX_PPC},)
ifeq (${PREFIX_PPC64},)
ifeq (${PREFIX_ARM64},)
ifeq (${PREFIX_ARM64E},)
HAS_PREFIX=0
endif
endif
endif
endif
endif
endif
endif

ifeq (${ARCH},)
DARWIN_META_TARGETS := 1
else
# Configure CC et al. for the selected architecture ARCH, if any.
include arch/darwin/Makefile.arch

REAL_ARCH = ${ARCH}
endif

#
# MegaZeux doesn't use a C++ standard library by default, but modern compilers
# refuse to build without -stdlib. libstdc++ is required to target Snow Leopard,
# and Apple libstdc++ never got C++11, so forcibly disable that too if needed.
#
ifneq (${STDLIB},)
ARCH_CXXFLAGS ?= -stdlib=${STDLIB}
ifeq (${STDLIB},libstdc++)
HAS_CXX_11 := 0
endif
endif

ifneq (${DARWIN_META_TARGETS},1)

#
# Per-arch targets.
#

package: all
ifeq (${BUILD_EDITOR},1)
	${MV} ${mzx} ${mzx}.${REAL_ARCH}
endif
ifeq (${BUILD_MZXRUN},1)
	${MV} ${mzxrun} ${mzxrun}.${REAL_ARCH}
endif
ifeq (${BUILD_MODULAR},1)
	${MV} ${core_target} ${core_target}.${REAL_ARCH}
ifeq (${BUILD_EDITOR},1)
	${MV} ${editor_target} ${editor_target}.${REAL_ARCH}
endif
endif
ifeq (${BUILD_UTILS},1)
	${MV} ${checkres} ${checkres}.${REAL_ARCH}
	${MV} ${downver} ${downver}.${REAL_ARCH}
	${MV} ${hlp2txt} ${hlp2txt}.${REAL_ARCH}
	${MV} ${txt2hlp} ${txt2hlp}.${REAL_ARCH}
	${MV} ${png2smzx} ${png2smzx}.${REAL_ARCH}
	${MV} ${y4m2smzx} ${y4m2smzx}.${REAL_ARCH}
	${MV} ${ccv} ${ccv}.${REAL_ARCH}
endif

package_clean:
	${RM} -f ${mzx}.${REAL_ARCH}
	${RM} -f ${mzxrun}.${REAL_ARCH}
	${RM} -f ${core_target}.${REAL_ARCH}
	${RM} -f ${editor_target}.${REAL_ARCH}
	${RM} -f ${checkres}.${REAL_ARCH}
	${RM} -f ${downver}.${REAL_ARCH}
	${RM} -f ${hlp2txt}.${REAL_ARCH}
	${RM} -f ${txt2hlp}.${REAL_ARCH}
	${RM} -f ${png2smzx}.${REAL_ARCH}
	${RM} -f ${y4m2smzx}.${REAL_ARCH}
	${RM} -f ${ccv}.${REAL_ARCH}

else # DARWIN_META_TARGETS=1

#
# Define meta targets.
#

#
# Disable 'all' for the meta rules since no specific target arch is selected.
# Then add 'dist' to the 'all' target for convenience.
#
SUPPRESS_CC_TARGETS ?= 1
all: dist

lipo:
ifeq (${BUILD_MZXRUN},1)
	${LIPO} ${mzxrun}
endif
ifeq (${BUILD_EDITOR},1)
	${LIPO} ${mzx}
endif
ifeq (${BUILD_MODULAR},1)
	${LIPO} ${core_target}
ifeq (${BUILD_EDITOR},1)
	${LIPO} ${editor_target}
endif
endif
ifeq (${BUILD_UTILS},1)
	${LIPO} ${checkres} ${downver} ${hlp2txt} ${txt2hlp} ${png2smzx} ${y4m2smzx} ${ccv}
endif

dist:
ifeq (${HAS_PREFIX},0)
	$(error No target prefix defined!\
	 Select build targets by defining one or more of PREFIX_I686,\
	 PREFIX_AMD64, PREFIX_AMD64H, PREFIX_PPC, PREFIX_PPC64,\
	 PREFIX_ARM64, or PREFIX_ARM64E,\
	 then build with "make dist")
endif
	@${MAKE} ARCH=i686 clean
ifneq (${PREFIX_I686},)
	@echo "Building 'i686' with PREFIX='${PREFIX_I686}'"
	@${MAKE} PREFIX=${PREFIX_I686} ARCH=i686 package
	@${MAKE} PREFIX=${PREFIX_I686} ARCH=i686 clean
endif
ifneq (${PREFIX_AMD64},)
	@echo "Building 'x86_64' with PREFIX='${PREFIX_AMD64}'"
	@${MAKE} PREFIX=${PREFIX_AMD64} ARCH=x86_64 package
	@${MAKE} PREFIX=${PREFIX_AMD64} ARCH=x86_64 clean
endif
ifneq (${PREFIX_AMD64H},)
	@echo "Building 'x86_64h' with PREFIX='${PREFIX_AMD64H}'"
	@${MAKE} PREFIX=${PREFIX_AMD64H} ARCH=x86_64h package
	@${MAKE} PREFIX=${PREFIX_AMD64H} ARCH=x86_64h clean
endif
ifneq (${PREFIX_PPC},)
	@echo "Building 'ppc' with PREFIX='${PREFIX_PPC}'"
	@${MAKE} PREFIX=${PREFIX_PPC} ARCH=ppc package
	@${MAKE} PREFIX=${PREFIX_PPC} ARCH=ppc clean
endif
ifneq (${PREFIX_PPC64},)
	@echo "Building 'ppc64' with PREFIX='${PREFIX_PPC64}'"
	@${MAKE} PREFIX=${PREFIX_PPC64} ARCH=ppc64 package
	@${MAKE} PREFIX=${PREFIX_PPC64} ARCH=ppc64 clean
endif
ifneq (${PREFIX_ARM64},)
	@echo "Building 'arm64' with PREFIX='${PREFIX_ARM64}'"
	@${MAKE} PREFIX=${PREFIX_ARM64} ARCH=arm64 package
	@${MAKE} PREFIX=${PREFIX_ARM64} ARCH=arm64 clean
endif
ifneq (${PREFIX_ARM64E},)
	@echo "Building 'arm64e' with PREFIX='${PREFIX_ARM64E}'"
	@${MAKE} PREFIX=${PREFIX_ARM64E} ARCH=arm64e package
	@${MAKE} PREFIX=${PREFIX_ARM64E} ARCH=arm64e clean
endif
	@${MAKE} lipo

#package_clean:
#	@${MAKE} ARCH=i686 package_clean
#	@${MAKE} ARCH=x86_64 package_clean
#	@${MAKE} ARCH=x86_64h package_clean
#	@${MAKE} ARCH=ppc package_clean
#	@${MAKE} ARCH=ppc64 package_clean
#	@${MAKE} ARCH=arm64 package_clean
#	@${MAKE} ARCH=arm64e package_clean

mzx_app := ${build_root}/MegaZeux.app/
mzxrun_app := ${build_root}/MZXRun.app/

build := ${mzx_app}/Contents/Resources
build:
	${RM} ${build}/*.debug ${build}/utils/*.debug
	ln -s /Applications               ${mzx_app}/../Applications
	${MKDIR}                          ${mzx_app}/Contents/MacOS
	${CP} contrib/icons/quantump.icns ${mzx_app}/Contents/Resources/MegaZeux.icns
	${CP} ${build}/LICENSE            ${build}/docs/
	${MV} ${build}/docs               ${mzx_app}/../Documentation
	${MV} ${build}/${mzx}             ${mzx_app}/Contents/MacOS/MegaZeux
ifneq (${BUILD_MZXRUN},)
	${MV} ${build}/${mzxrun}          ${mzx_app}/Contents/MacOS/MZXRun
endif
ifneq (${BUILD_MODULAR},)
	${MV} ${build}/${core_target}     ${mzx_app}/Contents/MacOS/
	${MV} ${build}/${editor_target}   ${mzx_app}/Contents/MacOS/
endif
ifneq (${BUILD_MZXRUN},)
	${CP} -r ${mzx_app} ${mzxrun_app}
	${RM} ${mzx_app}/Contents/MacOS/MZXRun
	${RM} ${mzxrun_app}/Contents/MacOS/MegaZeux
ifneq (${BUILD_MODULAR},)
	${RM} ${mzxrun_app}/Contents/MacOS/${editor_target}
endif
	${CP} arch/darwin/MZXRun.plist    ${mzxrun_app}/Contents/Info.plist
endif
	${CP} arch/darwin/MegaZeux.plist  ${mzx_app}/Contents/Info.plist

archive: build
	@arch/darwin/dmg.sh ${TARGET}

#clean: package_clean

endif # DARWIN_META_TARGETS=1
endif # darwin-dist
